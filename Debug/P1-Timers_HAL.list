
P1-Timers_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a0a8  200000a4  080050dc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a14c  080050dc  0002a14c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbed  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4b  00000000  00000000  0002fcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00031a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00032860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dae  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ac  00000000  00000000  0005a3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3223  00000000  00000000  0006a86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015da8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000404c  00000000  00000000  0015dae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f14 	.word	0x08004f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08004f14 	.word	0x08004f14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	; 0x38
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fcc5 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f91d 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fa0d 	bl	80009a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f9db 	bl	8000940 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800058a:	f000 f969 	bl	8000860 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800058e:	2100      	movs	r1, #0
 8000590:	487e      	ldr	r0, [pc, #504]	; (800078c <main+0x218>)
 8000592:	f002 fbb5 	bl	8002d00 <HAL_TIM_IC_Start_IT>

  int mess_len = sprintf((char *)message, "Enter expected period or <CR> if no change\r\n");
 8000596:	497e      	ldr	r1, [pc, #504]	; (8000790 <main+0x21c>)
 8000598:	487e      	ldr	r0, [pc, #504]	; (8000794 <main+0x220>)
 800059a:	f004 f85b 	bl	8004654 <siprintf>
 800059e:	61f8      	str	r0, [r7, #28]
  int n = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
  int period = 950;
 80005a4:	f240 33b6 	movw	r3, #950	; 0x3b6
 80005a8:	637b      	str	r3, [r7, #52]	; 0x34
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (void*)&message, mess_len, HAL_MAX_DELAY);
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	4978      	ldr	r1, [pc, #480]	; (8000794 <main+0x220>)
 80005b4:	4878      	ldr	r0, [pc, #480]	; (8000798 <main+0x224>)
 80005b6:	f003 f9eb 	bl	8003990 <HAL_UART_Transmit>


	  int old_period = period;
 80005ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005bc:	617b      	str	r3, [r7, #20]
	  period = set_timer_base(old_period);
 80005be:	6978      	ldr	r0, [r7, #20]
 80005c0:	f000 fa74 	bl	8000aac <set_timer_base>
 80005c4:	6378      	str	r0, [r7, #52]	; 0x34
	  while(period == 0){
 80005c6:	e003      	b.n	80005d0 <main+0x5c>
		  period = set_timer_base(old_period);
 80005c8:	6978      	ldr	r0, [r7, #20]
 80005ca:	f000 fa6f 	bl	8000aac <set_timer_base>
 80005ce:	6378      	str	r0, [r7, #52]	; 0x34
	  while(period == 0){
 80005d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f8      	beq.n	80005c8 <main+0x54>
	  }

	  memset(buckets, 0, MAX_PERIOD+100);
 80005d6:	f242 7242 	movw	r2, #10050	; 0x2742
 80005da:	2100      	movs	r1, #0
 80005dc:	486f      	ldr	r0, [pc, #444]	; (800079c <main+0x228>)
 80005de:	f004 f831 	bl	8004644 <memset>
	  memset(duty_buckets, 0, 100);
 80005e2:	2264      	movs	r2, #100	; 0x64
 80005e4:	2100      	movs	r1, #0
 80005e6:	486e      	ldr	r0, [pc, #440]	; (80007a0 <main+0x22c>)
 80005e8:	f004 f82c 	bl	8004644 <memset>

	  n = sprintf((char *)buffer, "Period is %d\r\n", period);
 80005ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005ee:	496d      	ldr	r1, [pc, #436]	; (80007a4 <main+0x230>)
 80005f0:	486d      	ldr	r0, [pc, #436]	; (80007a8 <main+0x234>)
 80005f2:	f004 f82f 	bl	8004654 <siprintf>
 80005f6:	61b8      	str	r0, [r7, #24]
	  HAL_UART_Transmit(&huart2, (void*)&buffer, n, HAL_MAX_DELAY);
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	4969      	ldr	r1, [pc, #420]	; (80007a8 <main+0x234>)
 8000602:	4865      	ldr	r0, [pc, #404]	; (8000798 <main+0x224>)
 8000604:	f003 f9c4 	bl	8003990 <HAL_UART_Transmit>


	  while((GPIOA->IDR)&1){
 8000608:	e000      	b.n	800060c <main+0x98>
		  continue;
 800060a:	bf00      	nop
	  while((GPIOA->IDR)&1){
 800060c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000610:	691b      	ldr	r3, [r3, #16]
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <main+0x96>
	  }

	  uint32_t IC_Val1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	485b      	ldr	r0, [pc, #364]	; (800078c <main+0x218>)
 800061e:	f002 fe1f 	bl	8003260 <HAL_TIM_ReadCapturedValue>
 8000622:	6338      	str	r0, [r7, #48]	; 0x30
	  uint32_t IC_Val2 = IC_Val1;
 8000624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
	  //uint32_t IC_Val3;

	  for(int i = 0; i < 1000; i++){
 8000628:	2300      	movs	r3, #0
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
 800062c:	e040      	b.n	80006b0 <main+0x13c>
		  while(IC_Val2 == IC_Val1){
		  	  IC_Val2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4856      	ldr	r0, [pc, #344]	; (800078c <main+0x218>)
 8000632:	f002 fe15 	bl	8003260 <HAL_TIM_ReadCapturedValue>
 8000636:	62f8      	str	r0, [r7, #44]	; 0x2c
		  while(IC_Val2 == IC_Val1){
 8000638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800063a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063c:	429a      	cmp	r2, r3
 800063e:	d0f6      	beq.n	800062e <main+0xba>
		  }
		  uint32_t up_diff = IC_Val2-IC_Val1;
 8000640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	613b      	str	r3, [r7, #16]
		  IC_Val1 = IC_Val2;
 8000648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
		  while(IC_Val2 == IC_Val1){
 800064c:	e004      	b.n	8000658 <main+0xe4>
			  IC_Val1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 800064e:	2100      	movs	r1, #0
 8000650:	484e      	ldr	r0, [pc, #312]	; (800078c <main+0x218>)
 8000652:	f002 fe05 	bl	8003260 <HAL_TIM_ReadCapturedValue>
 8000656:	6338      	str	r0, [r7, #48]	; 0x30
		  while(IC_Val2 == IC_Val1){
 8000658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065c:	429a      	cmp	r2, r3
 800065e:	d0f6      	beq.n	800064e <main+0xda>
		  }

		  uint32_t down_diff = IC_Val1-IC_Val2;
 8000660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	60fb      	str	r3, [r7, #12]
		  uint32_t total_diff = up_diff+down_diff;
 8000668:	693a      	ldr	r2, [r7, #16]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
		  buckets[total_diff]++;
 8000670:	4a4a      	ldr	r2, [pc, #296]	; (800079c <main+0x228>)
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000678:	1c5a      	adds	r2, r3, #1
 800067a:	4948      	ldr	r1, [pc, #288]	; (800079c <main+0x228>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  int cycle = (up_diff*100)/total_diff;
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	2264      	movs	r2, #100	; 0x64
 8000686:	fb03 f202 	mul.w	r2, r3, r2
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000690:	607b      	str	r3, [r7, #4]
		  duty_buckets[100-cycle]++;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000698:	4a41      	ldr	r2, [pc, #260]	; (80007a0 <main+0x22c>)
 800069a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069e:	3201      	adds	r2, #1
 80006a0:	493f      	ldr	r1, [pc, #252]	; (80007a0 <main+0x22c>)
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  IC_Val2 = IC_Val1;
 80006a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for(int i = 0; i < 1000; i++){
 80006aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ac:	3301      	adds	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80006b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b6:	dbbf      	blt.n	8000638 <main+0xc4>
	  }


	  n = sprintf((char *)buffer, "Timing Buckets:\r\n");
 80006b8:	493c      	ldr	r1, [pc, #240]	; (80007ac <main+0x238>)
 80006ba:	483b      	ldr	r0, [pc, #236]	; (80007a8 <main+0x234>)
 80006bc:	f003 ffca 	bl	8004654 <siprintf>
 80006c0:	61b8      	str	r0, [r7, #24]
	  HAL_UART_Transmit(&huart2, (void*)&buffer, n, HAL_MAX_DELAY);
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	4937      	ldr	r1, [pc, #220]	; (80007a8 <main+0x234>)
 80006cc:	4832      	ldr	r0, [pc, #200]	; (8000798 <main+0x224>)
 80006ce:	f003 f95f 	bl	8003990 <HAL_UART_Transmit>
	  for(int i = 0; i <= MAX_PERIOD+100; i++){
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
 80006d6:	e01f      	b.n	8000718 <main+0x1a4>
		  if(buckets[i] != 0){
 80006d8:	4a30      	ldr	r2, [pc, #192]	; (800079c <main+0x228>)
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d016      	beq.n	8000712 <main+0x19e>
			  n = sprintf((char *)buffer, "%d %d\r\n", i, buckets[i]);
 80006e4:	4a2d      	ldr	r2, [pc, #180]	; (800079c <main+0x228>)
 80006e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ee:	4930      	ldr	r1, [pc, #192]	; (80007b0 <main+0x23c>)
 80006f0:	482d      	ldr	r0, [pc, #180]	; (80007a8 <main+0x234>)
 80006f2:	f003 ffaf 	bl	8004654 <siprintf>
 80006f6:	61b8      	str	r0, [r7, #24]
			  HAL_UART_Transmit(&huart2, (void*)&buffer, n, HAL_MAX_DELAY);
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	4929      	ldr	r1, [pc, #164]	; (80007a8 <main+0x234>)
 8000702:	4825      	ldr	r0, [pc, #148]	; (8000798 <main+0x224>)
 8000704:	f003 f944 	bl	8003990 <HAL_UART_Transmit>
			  buckets[i] = 0;
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <main+0x228>)
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	2100      	movs	r1, #0
 800070e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i = 0; i <= MAX_PERIOD+100; i++){
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	3301      	adds	r3, #1
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	f242 7242 	movw	r2, #10050	; 0x2742
 800071e:	4293      	cmp	r3, r2
 8000720:	ddda      	ble.n	80006d8 <main+0x164>
		  }
	  }


	  n = sprintf((char *)buffer, "Duty Cycle Buckets:\r\n");
 8000722:	4924      	ldr	r1, [pc, #144]	; (80007b4 <main+0x240>)
 8000724:	4820      	ldr	r0, [pc, #128]	; (80007a8 <main+0x234>)
 8000726:	f003 ff95 	bl	8004654 <siprintf>
 800072a:	61b8      	str	r0, [r7, #24]
	  HAL_UART_Transmit(&huart2, (void*)&buffer, n, HAL_MAX_DELAY);
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	b29a      	uxth	r2, r3
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	491c      	ldr	r1, [pc, #112]	; (80007a8 <main+0x234>)
 8000736:	4818      	ldr	r0, [pc, #96]	; (8000798 <main+0x224>)
 8000738:	f003 f92a 	bl	8003990 <HAL_UART_Transmit>
	  for(int i = 0; i <= 100; i++){
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
 8000740:	e01f      	b.n	8000782 <main+0x20e>
	  	  if(duty_buckets[i] != 0){
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <main+0x22c>)
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d016      	beq.n	800077c <main+0x208>
	  		  n = sprintf((char *)buffer, "%%%d %d\r\n", i, duty_buckets[i]);
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <main+0x22c>)
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	6a3a      	ldr	r2, [r7, #32]
 8000758:	4917      	ldr	r1, [pc, #92]	; (80007b8 <main+0x244>)
 800075a:	4813      	ldr	r0, [pc, #76]	; (80007a8 <main+0x234>)
 800075c:	f003 ff7a 	bl	8004654 <siprintf>
 8000760:	61b8      	str	r0, [r7, #24]
	  		  HAL_UART_Transmit(&huart2, (void*)&buffer, n, HAL_MAX_DELAY);
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	b29a      	uxth	r2, r3
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	490f      	ldr	r1, [pc, #60]	; (80007a8 <main+0x234>)
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <main+0x224>)
 800076e:	f003 f90f 	bl	8003990 <HAL_UART_Transmit>
	  		  duty_buckets[i] = 0;
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <main+0x22c>)
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	2100      	movs	r1, #0
 8000778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(int i = 0; i <= 100; i++){
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b64      	cmp	r3, #100	; 0x64
 8000786:	dddc      	ble.n	8000742 <main+0x1ce>
  {
 8000788:	e70f      	b.n	80005aa <main+0x36>
 800078a:	bf00      	nop
 800078c:	200000c0 	.word	0x200000c0
 8000790:	08004f2c 	.word	0x08004f2c
 8000794:	20000194 	.word	0x20000194
 8000798:	2000010c 	.word	0x2000010c
 800079c:	20000294 	.word	0x20000294
 80007a0:	20009fa0 	.word	0x20009fa0
 80007a4:	08004f5c 	.word	0x08004f5c
 80007a8:	20000214 	.word	0x20000214
 80007ac:	08004f6c 	.word	0x08004f6c
 80007b0:	08004f80 	.word	0x08004f80
 80007b4:	08004f88 	.word	0x08004f88
 80007b8:	08004fa0 	.word	0x08004fa0

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	; 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 ff3a 	bl	8004644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e2:	f000 fec3 	bl	800156c <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ec:	f000 fa2a 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2310      	movs	r3, #16
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800080a:	230a      	movs	r3, #10
 800080c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080e:	2307      	movs	r3, #7
 8000810:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fefa 	bl	8001618 <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800082a:	f000 fa0b 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	2104      	movs	r1, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fac2 	bl	8001dd0 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000852:	f000 f9f7 	bl	8000c44 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3758      	adds	r7, #88	; 0x58
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_TIM2_Init+0xdc>)
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <MX_TIM2_Init+0xdc>)
 8000896:	224f      	movs	r2, #79	; 0x4f
 8000898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_TIM2_Init+0xdc>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_TIM2_Init+0xdc>)
 80008a2:	f04f 32ff 	mov.w	r2, #4294967295
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_TIM2_Init+0xdc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_TIM2_Init+0xdc>)
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4821      	ldr	r0, [pc, #132]	; (800093c <MX_TIM2_Init+0xdc>)
 80008b6:	f002 f96b 	bl	8002b90 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80008c0:	f000 f9c0 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	4619      	mov	r1, r3
 80008d0:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_TIM2_Init+0xdc>)
 80008d2:	f002 fbfb 	bl	80030cc <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80008dc:	f000 f9b2 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008e0:	4816      	ldr	r0, [pc, #88]	; (800093c <MX_TIM2_Init+0xdc>)
 80008e2:	f002 f9ac 	bl	8002c3e <HAL_TIM_IC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008ec:	f000 f9aa 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480f      	ldr	r0, [pc, #60]	; (800093c <MX_TIM2_Init+0xdc>)
 8000900:	f002 ff70 	bl	80037e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800090a:	f000 f99b 	bl	8000c44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800090e:	230a      	movs	r3, #10
 8000910:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000912:	2301      	movs	r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_TIM2_Init+0xdc>)
 8000926:	f002 fb35 	bl	8002f94 <HAL_TIM_IC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000930:	f000 f988 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200000c0 	.word	0x200000c0

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART2_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000984:	f002 ffb6 	bl	80038f4 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f959 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000010c 	.word	0x2000010c
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_GPIO_Init+0xc4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_GPIO_Init+0xc4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xc4>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_GPIO_Init+0xc4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fd7f 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <MX_GPIO_Init+0xc8>)
 8000a3a:	f000 fbc7 	bl	80011cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fbb8 	bl	80011cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000800 	.word	0x48000800

08000a6c <print_setting_clock>:

/* USER CODE BEGIN 4 */

void print_setting_clock(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (void*)&setting_clock_messaage, sizeof(setting_clock_messaage), HAL_MAX_DELAY);
 8000a70:	f04f 33ff 	mov.w	r3, #4294967295
 8000a74:	221b      	movs	r2, #27
 8000a76:	4903      	ldr	r1, [pc, #12]	; (8000a84 <print_setting_clock+0x18>)
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <print_setting_clock+0x1c>)
 8000a7a:	f002 ff89 	bl	8003990 <HAL_UART_Transmit>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000018 	.word	0x20000018
 8000a88:	2000010c 	.word	0x2000010c

08000a8c <print_bad_input>:

void print_bad_input(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (void*)&invalid_messaage, sizeof(invalid_messaage), HAL_MAX_DELAY);
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	2217      	movs	r2, #23
 8000a96:	4903      	ldr	r1, [pc, #12]	; (8000aa4 <print_bad_input+0x18>)
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <print_bad_input+0x1c>)
 8000a9a:	f002 ff79 	bl	8003990 <HAL_UART_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	2000010c 	.word	0x2000010c

08000aac <set_timer_base>:

int set_timer_base(int old_period){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

	get_line(buffer, sizeof(buffer));
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	482c      	ldr	r0, [pc, #176]	; (8000b68 <set_timer_base+0xbc>)
 8000ab8:	f000 f858 	bl	8000b6c <get_line>

	if(buffer[0] == 0){
 8000abc:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <set_timer_base+0xbc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <set_timer_base+0x20>
		print_bad_input();
 8000ac4:	f7ff ffe2 	bl	8000a8c <print_bad_input>
		return 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e049      	b.n	8000b60 <set_timer_base+0xb4>
	}
	else if(buffer[0] == 13){
 8000acc:	4b26      	ldr	r3, [pc, #152]	; (8000b68 <set_timer_base+0xbc>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b0d      	cmp	r3, #13
 8000ad2:	d101      	bne.n	8000ad8 <set_timer_base+0x2c>
		return old_period;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	e043      	b.n	8000b60 <set_timer_base+0xb4>
	}
	int period = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < sizeof(buffer); i++){
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	e02f      	b.n	8000b42 <set_timer_base+0x96>
		if(buffer[i] == 13){
 8000ae2:	4a21      	ldr	r2, [pc, #132]	; (8000b68 <set_timer_base+0xbc>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b0d      	cmp	r3, #13
 8000aec:	d02d      	beq.n	8000b4a <set_timer_base+0x9e>
			break;
		}
		if(buffer[i] > 57 || buffer[i] < 48){
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <set_timer_base+0xbc>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4413      	add	r3, r2
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b39      	cmp	r3, #57	; 0x39
 8000af8:	d805      	bhi.n	8000b06 <set_timer_base+0x5a>
 8000afa:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <set_timer_base+0xbc>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4413      	add	r3, r2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b2f      	cmp	r3, #47	; 0x2f
 8000b04:	d803      	bhi.n	8000b0e <set_timer_base+0x62>
			print_bad_input();
 8000b06:	f7ff ffc1 	bl	8000a8c <print_bad_input>
			return 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e028      	b.n	8000b60 <set_timer_base+0xb4>
		}
		period *= 10;
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
		period += (buffer[i]-48);
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <set_timer_base+0xbc>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	3b30      	subs	r3, #48	; 0x30
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
		if(period > MAX_PERIOD){
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f242 62de 	movw	r2, #9950	; 0x26de
 8000b30:	4293      	cmp	r3, r2
 8000b32:	dd03      	ble.n	8000b3c <set_timer_base+0x90>
			print_bad_input();
 8000b34:	f7ff ffaa 	bl	8000a8c <print_bad_input>
			return 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e011      	b.n	8000b60 <set_timer_base+0xb4>
	for(int i = 0; i < sizeof(buffer); i++){
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2b7f      	cmp	r3, #127	; 0x7f
 8000b46:	d9cc      	bls.n	8000ae2 <set_timer_base+0x36>
 8000b48:	e000      	b.n	8000b4c <set_timer_base+0xa0>
			break;
 8000b4a:	bf00      	nop
		}
	}
	if(period < MIN_PERIOD){
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b31      	cmp	r3, #49	; 0x31
 8000b50:	dc03      	bgt.n	8000b5a <set_timer_base+0xae>
		print_bad_input();
 8000b52:	f7ff ff9b 	bl	8000a8c <print_bad_input>
		return 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e002      	b.n	8000b60 <set_timer_base+0xb4>
	}
	print_setting_clock();
 8000b5a:	f7ff ff87 	bl	8000a6c <print_setting_clock>
	return period;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000214 	.word	0x20000214

08000b6c <get_line>:

void get_line( void *buffer, int max_length){
 8000b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b70:	b087      	sub	sp, #28
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
 8000b78:	466b      	mov	r3, sp
 8000b7a:	461e      	mov	r6, r3
	int char_count = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
	char out_buf[max_length];
 8000b80:	6839      	ldr	r1, [r7, #0]
 8000b82:	1e4b      	subs	r3, r1, #1
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	460a      	mov	r2, r1
 8000b88:	2300      	movs	r3, #0
 8000b8a:	4690      	mov	r8, r2
 8000b8c:	4699      	mov	r9, r3
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ba2:	460a      	mov	r2, r1
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	4614      	mov	r4, r2
 8000ba8:	461d      	mov	r5, r3
 8000baa:	f04f 0200 	mov.w	r2, #0
 8000bae:	f04f 0300 	mov.w	r3, #0
 8000bb2:	00eb      	lsls	r3, r5, #3
 8000bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bb8:	00e2      	lsls	r2, r4, #3
 8000bba:	460b      	mov	r3, r1
 8000bbc:	3307      	adds	r3, #7
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	ebad 0d03 	sub.w	sp, sp, r3
 8000bc6:	466b      	mov	r3, sp
 8000bc8:	3300      	adds	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]


	while(char_count < max_length-3){
 8000bcc:	e025      	b.n	8000c1a <get_line+0xae>
		char rxByte;
		HAL_UART_Receive(&huart2, (void*)&rxByte, 1, HAL_MAX_DELAY);
 8000bce:	f107 010b 	add.w	r1, r7, #11
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4819      	ldr	r0, [pc, #100]	; (8000c40 <get_line+0xd4>)
 8000bda:	f002 ff63 	bl	8003aa4 <HAL_UART_Receive>
		out_buf[char_count] = rxByte;
 8000bde:	7af9      	ldrb	r1, [r7, #11]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	460a      	mov	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
		char_count++;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart2, (void*)&rxByte, 1, HAL_MAX_DELAY);
 8000bf0:	f107 010b 	add.w	r1, r7, #11
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4811      	ldr	r0, [pc, #68]	; (8000c40 <get_line+0xd4>)
 8000bfc:	f002 fec8 	bl	8003990 <HAL_UART_Transmit>
		if(rxByte == 13){
 8000c00:	7afb      	ldrb	r3, [r7, #11]
 8000c02:	2b0d      	cmp	r3, #13
 8000c04:	d109      	bne.n	8000c1a <get_line+0xae>
			if(char_count == 1){
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d10c      	bne.n	8000c26 <get_line+0xba>
				memset(buffer, 0, max_length);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f003 fd16 	bl	8004644 <memset>
 8000c18:	e006      	b.n	8000c28 <get_line+0xbc>
	while(char_count < max_length-3){
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbd4      	blt.n	8000bce <get_line+0x62>
 8000c24:	e000      	b.n	8000c28 <get_line+0xbc>
			}
			break;
 8000c26:	bf00      	nop
		}
	}
	memcpy(buffer, out_buf, max_length);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68f9      	ldr	r1, [r7, #12]
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f003 fcfa 	bl	8004628 <memcpy>
 8000c34:	46b5      	mov	sp, r6
}
 8000c36:	bf00      	nop
 8000c38:	371c      	adds	r7, #28
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c40:	2000010c 	.word	0x2000010c

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_MspInit+0x44>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6613      	str	r3, [r2, #96]	; 0x60
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <HAL_MspInit+0x44>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb8:	d128      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <HAL_TIM_Base_MspInit+0x7c>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <HAL_TIM_Base_MspInit+0x7c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <HAL_TIM_Base_MspInit+0x7c>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_TIM_Base_MspInit+0x7c>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_TIM_Base_MspInit+0x7c>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fa60 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0ac      	sub	sp, #176	; 0xb0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2288      	movs	r2, #136	; 0x88
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 fc83 	bl	8004644 <memset>
  if(huart->Instance==USART2)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_UART_MspInit+0xb0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13b      	bne.n	8000dc0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fa5f 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d60:	f7ff ff70 	bl	8000c44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_UART_MspInit+0xb4>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0xb4>)
 8000d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <HAL_UART_MspInit+0xb4>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_UART_MspInit+0xb4>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_UART_MspInit+0xb4>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d88:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0xb4>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d94:	230c      	movs	r3, #12
 8000d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dac:	2307      	movs	r3, #7
 8000dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fa06 	bl	80011cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	37b0      	adds	r7, #176	; 0xb0
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f8d0 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f003 fbbe 	bl	80045d4 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20018000 	.word	0x20018000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	2000a134 	.word	0x2000a134
 8000e8c:	2000a150 	.word	0x2000a150

08000e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	; (8000ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <LoopForever+0xe>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	; (8000f00 <LoopForever+0x16>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f003 fb7d 	bl	80045e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee6:	f7ff fb45 	bl	8000574 <main>

08000eea <LoopForever>:

LoopForever:
    b LoopForever
 8000eea:	e7fe      	b.n	8000eea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000ef8:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8000efc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000f00:	2000a14c 	.word	0x2000a14c

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_Init+0x3c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <HAL_Init+0x3c>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 f920 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f24:	2000      	movs	r0, #0
 8000f26:	f000 f80f 	bl	8000f48 <HAL_InitTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	e001      	b.n	8000f3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f36:	f7ff fe8b 	bl	8000c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_InitTick+0x70>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_InitTick+0x6c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f91d 	bl	80011b2 <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f8f5 	bl	800117a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_InitTick+0x74>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	e007      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e004      	b.n	8000fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e001      	b.n	8000fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000003c 	.word	0x2000003c
 8000fb8:	20000034 	.word	0x20000034
 8000fbc:	20000038 	.word	0x20000038

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000003c 	.word	0x2000003c
 8000fe4:	2000a138 	.word	0x2000a138

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000a138 	.word	0x2000a138

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff47 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff5c 	bl	8001048 <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffb0 	bl	8001120 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011da:	e17f      	b.n	80014dc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8171 	beq.w	80014d6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d005      	beq.n	800120c <HAL_GPIO_Init+0x40>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d130      	bne.n	800126e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001242:	2201      	movs	r2, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 0201 	and.w	r2, r3, #1
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b03      	cmp	r3, #3
 8001278:	d118      	bne.n	80012ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	6939      	ldr	r1, [r7, #16]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80ac 	beq.w	80014d6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <HAL_GPIO_Init+0x330>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	4a5e      	ldr	r2, [pc, #376]	; (80014fc <HAL_GPIO_Init+0x330>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6613      	str	r3, [r2, #96]	; 0x60
 800138a:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <HAL_GPIO_Init+0x330>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001396:	4a5a      	ldr	r2, [pc, #360]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x242>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <HAL_GPIO_Init+0x338>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x23e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <HAL_GPIO_Init+0x33c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x23a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4d      	ldr	r2, [pc, #308]	; (800150c <HAL_GPIO_Init+0x340>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x236>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4c      	ldr	r2, [pc, #304]	; (8001510 <HAL_GPIO_Init+0x344>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x232>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <HAL_GPIO_Init+0x348>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x22e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4a      	ldr	r2, [pc, #296]	; (8001518 <HAL_GPIO_Init+0x34c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x22a>
 80013f2:	2306      	movs	r3, #6
 80013f4:	e00c      	b.n	8001410 <HAL_GPIO_Init+0x244>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e00a      	b.n	8001410 <HAL_GPIO_Init+0x244>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e008      	b.n	8001410 <HAL_GPIO_Init+0x244>
 80013fe:	2304      	movs	r3, #4
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x244>
 8001402:	2303      	movs	r3, #3
 8001404:	e004      	b.n	8001410 <HAL_GPIO_Init+0x244>
 8001406:	2302      	movs	r3, #2
 8001408:	e002      	b.n	8001410 <HAL_GPIO_Init+0x244>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <HAL_GPIO_Init+0x244>
 800140e:	2300      	movs	r3, #0
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	f002 0203 	and.w	r2, r2, #3
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4093      	lsls	r3, r2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001420:	4937      	ldr	r1, [pc, #220]	; (8001500 <HAL_GPIO_Init+0x334>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <HAL_GPIO_Init+0x350>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001452:	4a32      	ldr	r2, [pc, #200]	; (800151c <HAL_GPIO_Init+0x350>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001458:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_GPIO_Init+0x350>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800147c:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_GPIO_Init+0x350>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <HAL_GPIO_Init+0x350>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a6:	4a1d      	ldr	r2, [pc, #116]	; (800151c <HAL_GPIO_Init+0x350>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_GPIO_Init+0x350>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <HAL_GPIO_Init+0x350>)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f47f ae78 	bne.w	80011dc <HAL_GPIO_Init+0x10>
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	48000400 	.word	0x48000400
 8001508:	48000800 	.word	0x48000800
 800150c:	48000c00 	.word	0x48000c00
 8001510:	48001000 	.word	0x48001000
 8001514:	48001400 	.word	0x48001400
 8001518:	48001800 	.word	0x48001800
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e002      	b.n	8001544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <HAL_PWREx_GetVoltageRange+0x18>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40007000 	.word	0x40007000

0800156c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800157a:	d130      	bne.n	80015de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001588:	d038      	beq.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001594:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001598:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2232      	movs	r2, #50	; 0x32
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015a6:	fba2 2303 	umull	r2, r3, r2, r3
 80015aa:	0c9b      	lsrs	r3, r3, #18
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b0:	e002      	b.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c4:	d102      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f2      	bne.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d8:	d110      	bne.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e00f      	b.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ea:	d007      	beq.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f4:	4a05      	ldr	r2, [pc, #20]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40007000 	.word	0x40007000
 8001610:	20000034 	.word	0x20000034
 8001614:	431bde83 	.word	0x431bde83

08001618 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e3ca      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162a:	4b97      	ldr	r3, [pc, #604]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001634:	4b94      	ldr	r3, [pc, #592]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80e4 	beq.w	8001814 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_RCC_OscConfig+0x4a>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	f040 808b 	bne.w	8001770 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b01      	cmp	r3, #1
 800165e:	f040 8087 	bne.w	8001770 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001662:	4b89      	ldr	r3, [pc, #548]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x62>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e3a2      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1a      	ldr	r2, [r3, #32]
 800167e:	4b82      	ldr	r3, [pc, #520]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d004      	beq.n	8001694 <HAL_RCC_OscConfig+0x7c>
 800168a:	4b7f      	ldr	r3, [pc, #508]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001692:	e005      	b.n	80016a0 <HAL_RCC_OscConfig+0x88>
 8001694:	4b7c      	ldr	r3, [pc, #496]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d223      	bcs.n	80016ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fd55 	bl	8002158 <RCC_SetFlashLatencyFromMSIRange>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e383      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b8:	4b73      	ldr	r3, [pc, #460]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a72      	ldr	r2, [pc, #456]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016be:	f043 0308 	orr.w	r3, r3, #8
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b70      	ldr	r3, [pc, #448]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	496d      	ldr	r1, [pc, #436]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d6:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	4968      	ldr	r1, [pc, #416]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	604b      	str	r3, [r1, #4]
 80016ea:	e025      	b.n	8001738 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ec:	4b66      	ldr	r3, [pc, #408]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a65      	ldr	r2, [pc, #404]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b63      	ldr	r3, [pc, #396]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4960      	ldr	r1, [pc, #384]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170a:	4b5f      	ldr	r3, [pc, #380]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	495b      	ldr	r1, [pc, #364]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800171a:	4313      	orrs	r3, r2
 800171c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fd15 	bl	8002158 <RCC_SetFlashLatencyFromMSIRange>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e343      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001738:	f000 fc4a 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 800173c:	4602      	mov	r2, r0
 800173e:	4b52      	ldr	r3, [pc, #328]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	4950      	ldr	r1, [pc, #320]	; (800188c <HAL_RCC_OscConfig+0x274>)
 800174a:	5ccb      	ldrb	r3, [r1, r3]
 800174c:	f003 031f 	and.w	r3, r3, #31
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <HAL_RCC_OscConfig+0x278>)
 8001756:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001758:	4b4e      	ldr	r3, [pc, #312]	; (8001894 <HAL_RCC_OscConfig+0x27c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fbf3 	bl	8000f48 <HAL_InitTick>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d052      	beq.n	8001812 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	e327      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d032      	beq.n	80017de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a42      	ldr	r2, [pc, #264]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001784:	f7ff fc30 	bl	8000fe8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178c:	f7ff fc2c 	bl	8000fe8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e310      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a36      	ldr	r2, [pc, #216]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b34      	ldr	r3, [pc, #208]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4931      	ldr	r1, [pc, #196]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	492c      	ldr	r1, [pc, #176]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	e01a      	b.n	8001814 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017de:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fbfd 	bl	8000fe8 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f2:	f7ff fbf9 	bl	8000fe8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e2dd      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001804:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1da>
 8001810:	e000      	b.n	8001814 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001812:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d074      	beq.n	800190a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b08      	cmp	r3, #8
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x21a>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d10e      	bne.n	800184a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d064      	beq.n	8001908 <HAL_RCC_OscConfig+0x2f0>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d160      	bne.n	8001908 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e2ba      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x24a>
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e026      	b.n	80018b0 <HAL_RCC_OscConfig+0x298>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186a:	d115      	bne.n	8001898 <HAL_RCC_OscConfig+0x280>
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 8001872:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a02      	ldr	r2, [pc, #8]	; (8001888 <HAL_RCC_OscConfig+0x270>)
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e014      	b.n	80018b0 <HAL_RCC_OscConfig+0x298>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	08004fac 	.word	0x08004fac
 8001890:	20000034 	.word	0x20000034
 8001894:	20000038 	.word	0x20000038
 8001898:	4ba0      	ldr	r3, [pc, #640]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a9f      	ldr	r2, [pc, #636]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 800189e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b9d      	ldr	r3, [pc, #628]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a9c      	ldr	r2, [pc, #624]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb96 	bl	8000fe8 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fb92 	bl	8000fe8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e276      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d2:	4b92      	ldr	r3, [pc, #584]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x2a8>
 80018de:	e014      	b.n	800190a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fb82 	bl	8000fe8 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fb7e 	bl	8000fe8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	; 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e262      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x2d0>
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d060      	beq.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d005      	beq.n	8001928 <HAL_RCC_OscConfig+0x310>
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b0c      	cmp	r3, #12
 8001920:	d119      	bne.n	8001956 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d116      	bne.n	8001956 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001928:	4b7c      	ldr	r3, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_OscConfig+0x328>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e23f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	4973      	ldr	r1, [pc, #460]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001954:	e040      	b.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d023      	beq.n	80019a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195e:	4b6f      	ldr	r3, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a6e      	ldr	r2, [pc, #440]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff fb3d 	bl	8000fe8 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff fb39 	bl	8000fe8 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e21d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001984:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	495f      	ldr	r1, [pc, #380]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	e018      	b.n	80019d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a6:	4b5d      	ldr	r3, [pc, #372]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a5c      	ldr	r2, [pc, #368]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80019ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff fb19 	bl	8000fe8 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff fb15 	bl	8000fe8 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1f9      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d03c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ec:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f2:	4a4a      	ldr	r2, [pc, #296]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff faf4 	bl	8000fe8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff faf0 	bl	8000fe8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1d4      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a16:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ef      	beq.n	8001a04 <HAL_RCC_OscConfig+0x3ec>
 8001a24:	e01b      	b.n	8001a5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2c:	4a3b      	ldr	r2, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff fad7 	bl	8000fe8 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fad3 	bl	8000fe8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1b7      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a50:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ef      	bne.n	8001a3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80a6 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d10d      	bne.n	8001a98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a86:	6593      	str	r3, [r2, #88]	; 0x58
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a94:	2301      	movs	r3, #1
 8001a96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x508>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d118      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <HAL_RCC_OscConfig+0x508>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <HAL_RCC_OscConfig+0x508>)
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fa9a 	bl	8000fe8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab8:	f7ff fa96 	bl	8000fe8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e17a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_RCC_OscConfig+0x508>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0f0      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d108      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4d8>
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aee:	e029      	b.n	8001b44 <HAL_RCC_OscConfig+0x52c>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d115      	bne.n	8001b24 <HAL_RCC_OscConfig+0x50c>
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <HAL_RCC_OscConfig+0x504>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b18:	e014      	b.n	8001b44 <HAL_RCC_OscConfig+0x52c>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40007000 	.word	0x40007000
 8001b24:	4b9c      	ldr	r3, [pc, #624]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2a:	4a9b      	ldr	r2, [pc, #620]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b34:	4b98      	ldr	r3, [pc, #608]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	4a97      	ldr	r2, [pc, #604]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d016      	beq.n	8001b7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa4c 	bl	8000fe8 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7ff fa48 	bl	8000fe8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e12a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ed      	beq.n	8001b54 <HAL_RCC_OscConfig+0x53c>
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fa35 	bl	8000fe8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fa31 	bl	8000fe8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e113      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b98:	4b7f      	ldr	r3, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1ed      	bne.n	8001b82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bac:	4b7a      	ldr	r3, [pc, #488]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	4a79      	ldr	r2, [pc, #484]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80fe 	beq.w	8001dbe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	f040 80d0 	bne.w	8001d6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bcc:	4b72      	ldr	r3, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d130      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	3b01      	subs	r3, #1
 8001bec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d127      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d11f      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c0c:	2a07      	cmp	r2, #7
 8001c0e:	bf14      	ite	ne
 8001c10:	2201      	movne	r2, #1
 8001c12:	2200      	moveq	r2, #0
 8001c14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d113      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	3b01      	subs	r3, #1
 8001c28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d06e      	beq.n	8001d20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d069      	beq.n	8001d1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c48:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c54:	4b50      	ldr	r3, [pc, #320]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0ad      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c64:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c70:	f7ff f9ba 	bl	8000fe8 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c78:	f7ff f9b6 	bl	8000fe8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e09a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c96:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x784>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	4311      	orrs	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb0:	0212      	lsls	r2, r2, #8
 8001cb2:	4311      	orrs	r1, r2
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cb8:	0852      	lsrs	r2, r2, #1
 8001cba:	3a01      	subs	r2, #1
 8001cbc:	0552      	lsls	r2, r2, #21
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cc4:	0852      	lsrs	r2, r2, #1
 8001cc6:	3a01      	subs	r2, #1
 8001cc8:	0652      	lsls	r2, r2, #25
 8001cca:	4311      	orrs	r1, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd0:	0912      	lsrs	r2, r2, #4
 8001cd2:	0452      	lsls	r2, r2, #17
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	4930      	ldr	r1, [pc, #192]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf4:	f7ff f978 	bl	8000fe8 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f974 	bl	8000fe8 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e058      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1a:	e050      	b.n	8001dbe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e04f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d148      	bne.n	8001dbe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d44:	f7ff f950 	bl	8000fe8 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f94c 	bl	8000fe8 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e030      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x734>
 8001d6a:	e028      	b.n	8001dbe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d023      	beq.n	8001dba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_RCC_OscConfig+0x780>)
 8001d78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f933 	bl	8000fe8 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d84:	e00c      	b.n	8001da0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7ff f92f 	bl	8000fe8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d905      	bls.n	8001da0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e013      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_OscConfig+0x7b0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ec      	bne.n	8001d86 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x7b0>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4905      	ldr	r1, [pc, #20]	; (8001dc8 <HAL_RCC_OscConfig+0x7b0>)
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_OscConfig+0x7b4>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
 8001db8:	e001      	b.n	8001dbe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	feeefffc 	.word	0xfeeefffc

08001dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0e7      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b75      	ldr	r3, [pc, #468]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4970      	ldr	r1, [pc, #448]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b6e      	ldr	r3, [pc, #440]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0cf      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d908      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4960      	ldr	r1, [pc, #384]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d04c      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b5a      	ldr	r3, [pc, #360]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d121      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0a6      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e09a      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e86:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e08e      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e086      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4943      	ldr	r1, [pc, #268]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f896 	bl	8000fe8 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff f892 	bl	8000fe8 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e06e      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d208      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	492b      	ldr	r1, [pc, #172]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d210      	bcs.n	8001f46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	4923      	ldr	r1, [pc, #140]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e036      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4918      	ldr	r1, [pc, #96]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4910      	ldr	r1, [pc, #64]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f84:	f000 f824 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	490b      	ldr	r1, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1fc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe ffcd 	bl	8000f48 <HAL_InitTick>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08004fac 	.word	0x08004fac
 8001fc8:	20000034 	.word	0x20000034
 8001fcc:	20000038 	.word	0x20000038

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d121      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d11e      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002004:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e005      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002020:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800202c:	4a2b      	ldr	r2, [pc, #172]	; (80020dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d102      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002048:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	e004      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d101      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d134      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0xa6>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d003      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0xac>
 8002074:	e005      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002078:	617b      	str	r3, [r7, #20]
      break;
 800207a:	e005      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	617b      	str	r3, [r7, #20]
      break;
 8002080:	e002      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	617b      	str	r3, [r7, #20]
      break;
 8002086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	3301      	adds	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	fb03 f202 	mul.w	r2, r3, r2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	0e5b      	lsrs	r3, r3, #25
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	3301      	adds	r3, #1
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020c8:	69bb      	ldr	r3, [r7, #24]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	08004fc4 	.word	0x08004fc4
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	007a1200 	.word	0x007a1200

080020e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000034 	.word	0x20000034

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002104:	f7ff fff0 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4904      	ldr	r1, [pc, #16]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	08004fbc 	.word	0x08004fbc

0800212c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002130:	f7ff ffda 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0adb      	lsrs	r3, r3, #11
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4904      	ldr	r1, [pc, #16]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08004fbc 	.word	0x08004fbc

08002158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002164:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002170:	f7ff f9ee 	bl	8001550 <HAL_PWREx_GetVoltageRange>
 8002174:	6178      	str	r0, [r7, #20]
 8002176:	e014      	b.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	; 0x58
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002190:	f7ff f9de 	bl	8001550 <HAL_PWREx_GetVoltageRange>
 8002194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a8:	d10b      	bne.n	80021c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d919      	bls.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2ba0      	cmp	r3, #160	; 0xa0
 80021b4:	d902      	bls.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e013      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	e010      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d902      	bls.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021c8:	2303      	movs	r3, #3
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e00a      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b80      	cmp	r3, #128	; 0x80
 80021d2:	d102      	bne.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021d4:	2302      	movs	r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e004      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b70      	cmp	r3, #112	; 0x70
 80021de:	d101      	bne.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e0:	2301      	movs	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 0207 	bic.w	r2, r3, #7
 80021ec:	4909      	ldr	r1, [pc, #36]	; (8002214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002220:	2300      	movs	r3, #0
 8002222:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002224:	2300      	movs	r3, #0
 8002226:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002230:	2b00      	cmp	r3, #0
 8002232:	d041      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002238:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800223c:	d02a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800223e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002242:	d824      	bhi.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002244:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002248:	d008      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800224a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800224e:	d81e      	bhi.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002258:	d010      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800225a:	e018      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800225c:	4b86      	ldr	r3, [pc, #536]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4a85      	ldr	r2, [pc, #532]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002266:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002268:	e015      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fabb 	bl	80027ec <RCCEx_PLLSAI1_Config>
 8002276:	4603      	mov	r3, r0
 8002278:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800227a:	e00c      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3320      	adds	r3, #32
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fba6 	bl	80029d4 <RCCEx_PLLSAI2_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800228c:	e003      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	74fb      	strb	r3, [r7, #19]
      break;
 8002292:	e000      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002296:	7cfb      	ldrb	r3, [r7, #19]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10b      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800229c:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022aa:	4973      	ldr	r1, [pc, #460]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022b2:	e001      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b4:	7cfb      	ldrb	r3, [r7, #19]
 80022b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d041      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022cc:	d02a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022d2:	d824      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d8:	d008      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022de:	d81e      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e8:	d010      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ea:	e018      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ec:	4b62      	ldr	r3, [pc, #392]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a61      	ldr	r2, [pc, #388]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022f8:	e015      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fa73 	bl	80027ec <RCCEx_PLLSAI1_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800230a:	e00c      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3320      	adds	r3, #32
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fb5e 	bl	80029d4 <RCCEx_PLLSAI2_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800231c:	e003      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	74fb      	strb	r3, [r7, #19]
      break;
 8002322:	e000      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800232c:	4b52      	ldr	r3, [pc, #328]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800233a:	494f      	ldr	r1, [pc, #316]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002342:	e001      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a0 	beq.w	8002496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800236a:	2300      	movs	r3, #0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a40      	ldr	r2, [pc, #256]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3a      	ldr	r2, [pc, #232]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002398:	f7fe fe26 	bl	8000fe8 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800239e:	e009      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7fe fe22 	bl	8000fe8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d902      	bls.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	74fb      	strb	r3, [r7, #19]
        break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ef      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c6:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01f      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d019      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023f0:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	4a20      	ldr	r2, [pc, #128]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fde1 	bl	8000fe8 <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002428:	e00b      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe fddd 	bl	8000fe8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d902      	bls.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	74fb      	strb	r3, [r7, #19]
            break;
 8002440:	e006      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ec      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002466:	4904      	ldr	r1, [pc, #16]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800246e:	e009      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
 8002474:	e006      	b.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002484:	7c7b      	ldrb	r3, [r7, #17]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d105      	bne.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b9e      	ldr	r3, [pc, #632]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	4a9d      	ldr	r2, [pc, #628]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024a2:	4b98      	ldr	r3, [pc, #608]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f023 0203 	bic.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b0:	4994      	ldr	r1, [pc, #592]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c4:	4b8f      	ldr	r3, [pc, #572]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 020c 	bic.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	498c      	ldr	r1, [pc, #560]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024e6:	4b87      	ldr	r3, [pc, #540]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4983      	ldr	r1, [pc, #524]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002508:	4b7e      	ldr	r3, [pc, #504]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	497b      	ldr	r1, [pc, #492]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800252a:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002538:	4972      	ldr	r1, [pc, #456]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800254c:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	496a      	ldr	r1, [pc, #424]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	4961      	ldr	r1, [pc, #388]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002590:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	4959      	ldr	r1, [pc, #356]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c0:	4950      	ldr	r1, [pc, #320]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025d4:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e2:	4948      	ldr	r1, [pc, #288]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	493f      	ldr	r1, [pc, #252]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d028      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002618:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002626:	4937      	ldr	r1, [pc, #220]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002636:	d106      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002638:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002642:	60d3      	str	r3, [r2, #12]
 8002644:	e011      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264e:	d10c      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	2101      	movs	r1, #1
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f8c8 	bl	80027ec <RCCEx_PLLSAI1_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d028      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	491f      	ldr	r1, [pc, #124]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002694:	d106      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a0:	60d3      	str	r3, [r2, #12]
 80026a2:	e011      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2101      	movs	r1, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f899 	bl	80027ec <RCCEx_PLLSAI1_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d02b      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	4908      	ldr	r1, [pc, #32]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026f2:	d109      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a02      	ldr	r2, [pc, #8]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fe:	60d3      	str	r3, [r2, #12]
 8002700:	e014      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002710:	d10c      	bne.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3304      	adds	r3, #4
 8002716:	2101      	movs	r1, #1
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f867 	bl	80027ec <RCCEx_PLLSAI1_Config>
 800271e:	4603      	mov	r3, r0
 8002720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d02f      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002746:	4928      	ldr	r1, [pc, #160]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002756:	d10d      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	2102      	movs	r1, #2
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f844 	bl	80027ec <RCCEx_PLLSAI1_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d014      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	74bb      	strb	r3, [r7, #18]
 8002772:	e011      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800277c:	d10c      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3320      	adds	r3, #32
 8002782:	2102      	movs	r1, #2
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f925 	bl	80029d4 <RCCEx_PLLSAI2_Config>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b2:	490d      	ldr	r1, [pc, #52]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d6:	4904      	ldr	r1, [pc, #16]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027de:	7cbb      	ldrb	r3, [r7, #18]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000

080027ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027fa:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d018      	beq.n	8002838 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002806:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0203 	and.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d10d      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
       ||
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800281e:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
       ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d047      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e044      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b03      	cmp	r3, #3
 800283e:	d018      	beq.n	8002872 <RCCEx_PLLSAI1_Config+0x86>
 8002840:	2b03      	cmp	r3, #3
 8002842:	d825      	bhi.n	8002890 <RCCEx_PLLSAI1_Config+0xa4>
 8002844:	2b01      	cmp	r3, #1
 8002846:	d002      	beq.n	800284e <RCCEx_PLLSAI1_Config+0x62>
 8002848:	2b02      	cmp	r3, #2
 800284a:	d009      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x74>
 800284c:	e020      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800284e:	4b60      	ldr	r3, [pc, #384]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11d      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800285e:	e01a      	b.n	8002896 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002860:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002870:	e013      	b.n	800289a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002872:	4b57      	ldr	r3, [pc, #348]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800288e:	e006      	b.n	800289e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e004      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800289e:	bf00      	nop
    }

    if(status == HAL_OK)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	430b      	orrs	r3, r1
 80028bc:	4944      	ldr	r1, [pc, #272]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d17d      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a40      	ldr	r2, [pc, #256]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d4:	f7fe fb88 	bl	8000fe8 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028da:	e009      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028dc:	f7fe fb84 	bl	8000fe8 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d902      	bls.n	80028f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	73fb      	strb	r3, [r7, #15]
        break;
 80028ee:	e005      	b.n	80028fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028f0:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1ef      	bne.n	80028dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d160      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d111      	bne.n	800292c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6892      	ldr	r2, [r2, #8]
 8002918:	0211      	lsls	r1, r2, #8
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	0912      	lsrs	r2, r2, #4
 8002920:	0452      	lsls	r2, r2, #17
 8002922:	430a      	orrs	r2, r1
 8002924:	492a      	ldr	r1, [pc, #168]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	610b      	str	r3, [r1, #16]
 800292a:	e027      	b.n	800297c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d112      	bne.n	8002958 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800293a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6892      	ldr	r2, [r2, #8]
 8002942:	0211      	lsls	r1, r2, #8
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6912      	ldr	r2, [r2, #16]
 8002948:	0852      	lsrs	r2, r2, #1
 800294a:	3a01      	subs	r2, #1
 800294c:	0552      	lsls	r2, r2, #21
 800294e:	430a      	orrs	r2, r1
 8002950:	491f      	ldr	r1, [pc, #124]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	610b      	str	r3, [r1, #16]
 8002956:	e011      	b.n	800297c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002960:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	0211      	lsls	r1, r2, #8
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6952      	ldr	r2, [r2, #20]
 800296e:	0852      	lsrs	r2, r2, #1
 8002970:	3a01      	subs	r2, #1
 8002972:	0652      	lsls	r2, r2, #25
 8002974:	430a      	orrs	r2, r1
 8002976:	4916      	ldr	r1, [pc, #88]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	4313      	orrs	r3, r2
 800297a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800297c:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002986:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe fb2e 	bl	8000fe8 <HAL_GetTick>
 800298c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800298e:	e009      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002990:	f7fe fb2a 	bl	8000fe8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d902      	bls.n	80029a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	73fb      	strb	r3, [r7, #15]
          break;
 80029a2:	e005      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ef      	beq.n	8002990 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	4904      	ldr	r1, [pc, #16]	; (80029d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000

080029d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029e2:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029ee:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0203 	and.w	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d10d      	bne.n	8002a1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
       ||
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a06:	4b61      	ldr	r3, [pc, #388]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
       ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d047      	beq.n	8002aaa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
 8002a1e:	e044      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d018      	beq.n	8002a5a <RCCEx_PLLSAI2_Config+0x86>
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d825      	bhi.n	8002a78 <RCCEx_PLLSAI2_Config+0xa4>
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d002      	beq.n	8002a36 <RCCEx_PLLSAI2_Config+0x62>
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d009      	beq.n	8002a48 <RCCEx_PLLSAI2_Config+0x74>
 8002a34:	e020      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a36:	4b55      	ldr	r3, [pc, #340]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11d      	bne.n	8002a7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a46:	e01a      	b.n	8002a7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d116      	bne.n	8002a82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a58:	e013      	b.n	8002a82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a5a:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a66:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a76:	e006      	b.n	8002a86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e004      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a86:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a8e:	4b3f      	ldr	r3, [pc, #252]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6819      	ldr	r1, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	4939      	ldr	r1, [pc, #228]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d167      	bne.n	8002b80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a35      	ldr	r2, [pc, #212]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe fa94 	bl	8000fe8 <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ac2:	e009      	b.n	8002ad8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ac4:	f7fe fa90 	bl	8000fe8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ad6:	e005      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ef      	bne.n	8002ac4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d14a      	bne.n	8002b80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002af0:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6892      	ldr	r2, [r2, #8]
 8002b00:	0211      	lsls	r1, r2, #8
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68d2      	ldr	r2, [r2, #12]
 8002b06:	0912      	lsrs	r2, r2, #4
 8002b08:	0452      	lsls	r2, r2, #17
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	491f      	ldr	r1, [pc, #124]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	614b      	str	r3, [r1, #20]
 8002b12:	e011      	b.n	8002b38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6892      	ldr	r2, [r2, #8]
 8002b24:	0211      	lsls	r1, r2, #8
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6912      	ldr	r2, [r2, #16]
 8002b2a:	0852      	lsrs	r2, r2, #1
 8002b2c:	3a01      	subs	r2, #1
 8002b2e:	0652      	lsls	r2, r2, #25
 8002b30:	430a      	orrs	r2, r1
 8002b32:	4916      	ldr	r1, [pc, #88]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b44:	f7fe fa50 	bl	8000fe8 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b4a:	e009      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b4c:	f7fe fa4c 	bl	8000fe8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d902      	bls.n	8002b60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b5e:	e005      	b.n	8002b6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ef      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4904      	ldr	r1, [pc, #16]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e049      	b.n	8002c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fe f86e 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fb8a 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e049      	b.n	8002ce4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f841 	bl	8002cec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f000 fb33 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_TIM_IC_Start_IT+0x1e>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e023      	b.n	8002d66 <HAL_TIM_IC_Start_IT+0x66>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d104      	bne.n	8002d2e <HAL_TIM_IC_Start_IT+0x2e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	e01b      	b.n	8002d66 <HAL_TIM_IC_Start_IT+0x66>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d104      	bne.n	8002d3e <HAL_TIM_IC_Start_IT+0x3e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	e013      	b.n	8002d66 <HAL_TIM_IC_Start_IT+0x66>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_IC_Start_IT+0x4e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e00b      	b.n	8002d66 <HAL_TIM_IC_Start_IT+0x66>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_IC_Start_IT+0x5e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e003      	b.n	8002d66 <HAL_TIM_IC_Start_IT+0x66>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_TIM_IC_Start_IT+0x78>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e013      	b.n	8002da0 <HAL_TIM_IC_Start_IT+0xa0>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d104      	bne.n	8002d88 <HAL_TIM_IC_Start_IT+0x88>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	e00b      	b.n	8002da0 <HAL_TIM_IC_Start_IT+0xa0>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d104      	bne.n	8002d98 <HAL_TIM_IC_Start_IT+0x98>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e003      	b.n	8002da0 <HAL_TIM_IC_Start_IT+0xa0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002da8:	7b7b      	ldrb	r3, [r7, #13]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0dd      	b.n	8002f6e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_IC_Start_IT+0xc2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc0:	e023      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x10a>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_IC_Start_IT+0xd2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dd0:	e01b      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x10a>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_IC_Start_IT+0xe2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de0:	e013      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x10a>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b0c      	cmp	r3, #12
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_IC_Start_IT+0xf2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002df0:	e00b      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x10a>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_IC_Start_IT+0x102>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e00:	e003      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x10a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_IC_Start_IT+0x11a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e18:	e013      	b.n	8002e42 <HAL_TIM_IC_Start_IT+0x142>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_IC_Start_IT+0x12a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e28:	e00b      	b.n	8002e42 <HAL_TIM_IC_Start_IT+0x142>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_IC_Start_IT+0x13a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e38:	e003      	b.n	8002e42 <HAL_TIM_IC_Start_IT+0x142>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d841      	bhi.n	8002ecc <HAL_TIM_IC_Start_IT+0x1cc>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <HAL_TIM_IC_Start_IT+0x150>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e85 	.word	0x08002e85
 8002e54:	08002ecd 	.word	0x08002ecd
 8002e58:	08002ecd 	.word	0x08002ecd
 8002e5c:	08002ecd 	.word	0x08002ecd
 8002e60:	08002e97 	.word	0x08002e97
 8002e64:	08002ecd 	.word	0x08002ecd
 8002e68:	08002ecd 	.word	0x08002ecd
 8002e6c:	08002ecd 	.word	0x08002ecd
 8002e70:	08002ea9 	.word	0x08002ea9
 8002e74:	08002ecd 	.word	0x08002ecd
 8002e78:	08002ecd 	.word	0x08002ecd
 8002e7c:	08002ecd 	.word	0x08002ecd
 8002e80:	08002ebb 	.word	0x08002ebb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0202 	orr.w	r2, r2, #2
 8002e92:	60da      	str	r2, [r3, #12]
      break;
 8002e94:	e01d      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0204 	orr.w	r2, r2, #4
 8002ea4:	60da      	str	r2, [r3, #12]
      break;
 8002ea6:	e014      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	60da      	str	r2, [r3, #12]
      break;
 8002eb8:	e00b      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0210 	orr.w	r2, r2, #16
 8002ec8:	60da      	str	r2, [r3, #12]
      break;
 8002eca:	e002      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d149      	bne.n	8002f6c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	6839      	ldr	r1, [r7, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fc59 	bl	8003798 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <HAL_TIM_IC_Start_IT+0x278>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d01d      	beq.n	8002f2c <HAL_TIM_IC_Start_IT+0x22c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d018      	beq.n	8002f2c <HAL_TIM_IC_Start_IT+0x22c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_TIM_IC_Start_IT+0x27c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <HAL_TIM_IC_Start_IT+0x22c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_TIM_IC_Start_IT+0x280>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00e      	beq.n	8002f2c <HAL_TIM_IC_Start_IT+0x22c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_TIM_IC_Start_IT+0x284>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_TIM_IC_Start_IT+0x22c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <HAL_TIM_IC_Start_IT+0x288>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_TIM_IC_Start_IT+0x22c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <HAL_TIM_IC_Start_IT+0x28c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d115      	bne.n	8002f58 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_TIM_IC_Start_IT+0x290>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b06      	cmp	r3, #6
 8002f3c:	d015      	beq.n	8002f6a <HAL_TIM_IC_Start_IT+0x26a>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d011      	beq.n	8002f6a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	e008      	b.n	8002f6a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e000      	b.n	8002f6c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	40000c00 	.word	0x40000c00
 8002f88:	40013400 	.word	0x40013400
 8002f8c:	40014000 	.word	0x40014000
 8002f90:	00010007 	.word	0x00010007

08002f94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e088      	b.n	80030c4 <HAL_TIM_IC_ConfigChannel+0x130>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f000 fa24 	bl	800341c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 020c 	bic.w	r2, r2, #12
 8002fe2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6999      	ldr	r1, [r3, #24]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	619a      	str	r2, [r3, #24]
 8002ff6:	e060      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d11c      	bne.n	8003038 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6819      	ldr	r1, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f000 faa2 	bl	8003556 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003020:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6999      	ldr	r1, [r3, #24]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	021a      	lsls	r2, r3, #8
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	619a      	str	r2, [r3, #24]
 8003036:	e040      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d11b      	bne.n	8003076 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f000 faef 	bl	8003630 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 020c 	bic.w	r2, r2, #12
 8003060:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	61da      	str	r2, [r3, #28]
 8003074:	e021      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b0c      	cmp	r3, #12
 800307a:	d11c      	bne.n	80030b6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f000 fb0c 	bl	80036a8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800309e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69d9      	ldr	r1, [r3, #28]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	61da      	str	r2, [r3, #28]
 80030b4:	e001      	b.n	80030ba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_ConfigClockSource+0x1c>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e0b6      	b.n	8003256 <HAL_TIM_ConfigClockSource+0x18a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800310a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003112:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003124:	d03e      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0xd8>
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	f200 8087 	bhi.w	800323c <HAL_TIM_ConfigClockSource+0x170>
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	f000 8086 	beq.w	8003242 <HAL_TIM_ConfigClockSource+0x176>
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313a:	d87f      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x170>
 800313c:	2b70      	cmp	r3, #112	; 0x70
 800313e:	d01a      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xaa>
 8003140:	2b70      	cmp	r3, #112	; 0x70
 8003142:	d87b      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x170>
 8003144:	2b60      	cmp	r3, #96	; 0x60
 8003146:	d050      	beq.n	80031ea <HAL_TIM_ConfigClockSource+0x11e>
 8003148:	2b60      	cmp	r3, #96	; 0x60
 800314a:	d877      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x170>
 800314c:	2b50      	cmp	r3, #80	; 0x50
 800314e:	d03c      	beq.n	80031ca <HAL_TIM_ConfigClockSource+0xfe>
 8003150:	2b50      	cmp	r3, #80	; 0x50
 8003152:	d873      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x170>
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d058      	beq.n	800320a <HAL_TIM_ConfigClockSource+0x13e>
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d86f      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x170>
 800315c:	2b30      	cmp	r3, #48	; 0x30
 800315e:	d064      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15e>
 8003160:	2b30      	cmp	r3, #48	; 0x30
 8003162:	d86b      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x170>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d060      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15e>
 8003168:	2b20      	cmp	r3, #32
 800316a:	d867      	bhi.n	800323c <HAL_TIM_ConfigClockSource+0x170>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d05c      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15e>
 8003170:	2b10      	cmp	r3, #16
 8003172:	d05a      	beq.n	800322a <HAL_TIM_ConfigClockSource+0x15e>
 8003174:	e062      	b.n	800323c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f000 fae7 	bl	8003758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003198:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	609a      	str	r2, [r3, #8]
      break;
 80031a2:	e04f      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f000 fad0 	bl	8003758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c6:	609a      	str	r2, [r3, #8]
      break;
 80031c8:	e03c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	6859      	ldr	r1, [r3, #4]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f000 f98e 	bl	80034f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2150      	movs	r1, #80	; 0x50
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fa9d 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80031e8:	e02c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f000 f9ea 	bl	80035d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2160      	movs	r1, #96	; 0x60
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fa8d 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003208:	e01c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6859      	ldr	r1, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	461a      	mov	r2, r3
 8003218:	f000 f96e 	bl	80034f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2140      	movs	r1, #64	; 0x40
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fa7d 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003228:	e00c      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	4610      	mov	r0, r2
 8003236:	f000 fa74 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 800323a:	e003      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e000      	b.n	8003244 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003242:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d831      	bhi.n	80032d8 <HAL_TIM_ReadCapturedValue+0x78>
 8003274:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327a:	bf00      	nop
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032bb 	.word	0x080032bb
 8003290:	080032d9 	.word	0x080032d9
 8003294:	080032d9 	.word	0x080032d9
 8003298:	080032d9 	.word	0x080032d9
 800329c:	080032c5 	.word	0x080032c5
 80032a0:	080032d9 	.word	0x080032d9
 80032a4:	080032d9 	.word	0x080032d9
 80032a8:	080032d9 	.word	0x080032d9
 80032ac:	080032cf 	.word	0x080032cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	60fb      	str	r3, [r7, #12]

      break;
 80032b8:	e00f      	b.n	80032da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	60fb      	str	r3, [r7, #12]

      break;
 80032c2:	e00a      	b.n	80032da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	60fb      	str	r3, [r7, #12]

      break;
 80032cc:	e005      	b.n	80032da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	60fb      	str	r3, [r7, #12]

      break;
 80032d6:	e000      	b.n	80032da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80032d8:	bf00      	nop
  }

  return tmpreg;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a40      	ldr	r2, [pc, #256]	; (80033fc <TIM_Base_SetConfig+0x114>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003306:	d00f      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3d      	ldr	r2, [pc, #244]	; (8003400 <TIM_Base_SetConfig+0x118>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00b      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3c      	ldr	r2, [pc, #240]	; (8003404 <TIM_Base_SetConfig+0x11c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3b      	ldr	r2, [pc, #236]	; (8003408 <TIM_Base_SetConfig+0x120>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3a      	ldr	r2, [pc, #232]	; (800340c <TIM_Base_SetConfig+0x124>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2f      	ldr	r2, [pc, #188]	; (80033fc <TIM_Base_SetConfig+0x114>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003348:	d01b      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2c      	ldr	r2, [pc, #176]	; (8003400 <TIM_Base_SetConfig+0x118>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d017      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <TIM_Base_SetConfig+0x11c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d013      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <TIM_Base_SetConfig+0x120>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00f      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a29      	ldr	r2, [pc, #164]	; (800340c <TIM_Base_SetConfig+0x124>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00b      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a28      	ldr	r2, [pc, #160]	; (8003410 <TIM_Base_SetConfig+0x128>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a27      	ldr	r2, [pc, #156]	; (8003414 <TIM_Base_SetConfig+0x12c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_Base_SetConfig+0x9a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a26      	ldr	r2, [pc, #152]	; (8003418 <TIM_Base_SetConfig+0x130>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a10      	ldr	r2, [pc, #64]	; (80033fc <TIM_Base_SetConfig+0x114>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00f      	beq.n	80033e0 <TIM_Base_SetConfig+0xf8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a12      	ldr	r2, [pc, #72]	; (800340c <TIM_Base_SetConfig+0x124>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <TIM_Base_SetConfig+0xf8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a11      	ldr	r2, [pc, #68]	; (8003410 <TIM_Base_SetConfig+0x128>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d007      	beq.n	80033e0 <TIM_Base_SetConfig+0xf8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <TIM_Base_SetConfig+0x12c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_Base_SetConfig+0xf8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0f      	ldr	r2, [pc, #60]	; (8003418 <TIM_Base_SetConfig+0x130>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d103      	bne.n	80033e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	615a      	str	r2, [r3, #20]
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40000400 	.word	0x40000400
 8003404:	40000800 	.word	0x40000800
 8003408:	40000c00 	.word	0x40000c00
 800340c:	40013400 	.word	0x40013400
 8003410:	40014000 	.word	0x40014000
 8003414:	40014400 	.word	0x40014400
 8003418:	40014800 	.word	0x40014800

0800341c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 0201 	bic.w	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <TIM_TI1_SetConfig+0xc4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d017      	beq.n	800347a <TIM_TI1_SetConfig+0x5e>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003450:	d013      	beq.n	800347a <TIM_TI1_SetConfig+0x5e>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a23      	ldr	r2, [pc, #140]	; (80034e4 <TIM_TI1_SetConfig+0xc8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00f      	beq.n	800347a <TIM_TI1_SetConfig+0x5e>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a22      	ldr	r2, [pc, #136]	; (80034e8 <TIM_TI1_SetConfig+0xcc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_TI1_SetConfig+0x5e>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a21      	ldr	r2, [pc, #132]	; (80034ec <TIM_TI1_SetConfig+0xd0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_TI1_SetConfig+0x5e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <TIM_TI1_SetConfig+0xd4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_TI1_SetConfig+0x5e>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <TIM_TI1_SetConfig+0xd8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <TIM_TI1_SetConfig+0x62>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <TIM_TI1_SetConfig+0x64>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e003      	b.n	800349e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f023 030a 	bic.w	r3, r3, #10
 80034b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f003 030a 	and.w	r3, r3, #10
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40013400 	.word	0x40013400
 80034f4:	40014000 	.word	0x40014000

080034f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f023 0201 	bic.w	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f023 030a 	bic.w	r3, r3, #10
 8003534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	621a      	str	r2, [r3, #32]
}
 800354a:	bf00      	nop
 800354c:	371c      	adds	r7, #28
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003556:	b480      	push	{r7}
 8003558:	b087      	sub	sp, #28
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0210 	bic.w	r2, r3, #16
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	031b      	lsls	r3, r3, #12
 800359a:	b29b      	uxth	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	621a      	str	r2, [r3, #32]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f023 0210 	bic.w	r2, r3, #16
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	031b      	lsls	r3, r3, #12
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800360c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	621a      	str	r2, [r3, #32]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f023 0303 	bic.w	r3, r3, #3
 800365c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800366c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	b2db      	uxtb	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003680:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	031b      	lsls	r3, r3, #12
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	031b      	lsls	r3, r3, #12
 8003700:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	f043 0307 	orr.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	431a      	orrs	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1a      	ldr	r2, [r3, #32]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	fa01 f303 	lsl.w	r3, r1, r3
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e068      	b.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a2e      	ldr	r2, [pc, #184]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d01d      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386e:	d018      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a18      	ldr	r2, [pc, #96]	; (80038ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10c      	bne.n	80038bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40013400 	.word	0x40013400
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40014000 	.word	0x40014000

080038f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e040      	b.n	8003988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f9fe 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fc34 	bl	80041a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f979 	bl	8003c38 <UART_SetConfig>
 8003946:	4603      	mov	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e01b      	b.n	8003988 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800395e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800396e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fcb3 	bl	80042ec <UART_CheckIdleState>
 8003986:	4603      	mov	r3, r0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af02      	add	r7, sp, #8
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d178      	bne.n	8003a9a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_UART_Transmit+0x24>
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e071      	b.n	8003a9c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2221      	movs	r2, #33	; 0x21
 80039c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c6:	f7fd fb0f 	bl	8000fe8 <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d108      	bne.n	80039f8 <HAL_UART_Transmit+0x68>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a00:	e030      	b.n	8003a64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fd15 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d004      	beq.n	8003a22 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e03c      	b.n	8003a9c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	881a      	ldrh	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a34:	b292      	uxth	r2, r2
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	e008      	b.n	8003a52 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	b292      	uxth	r2, r2
 8003a4a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1c8      	bne.n	8003a02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2200      	movs	r2, #0
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fcde 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e005      	b.n	8003a9c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3720      	adds	r7, #32
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	f040 80b6 	bne.w	8003c2c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_UART_Receive+0x28>
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0ae      	b.n	8003c2e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2222      	movs	r2, #34	; 0x22
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ae6:	f7fd fa7f 	bl	8000fe8 <HAL_GetTick>
 8003aea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	88fa      	ldrh	r2, [r7, #6]
 8003af0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	88fa      	ldrh	r2, [r7, #6]
 8003af8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b04:	d10e      	bne.n	8003b24 <HAL_UART_Receive+0x80>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_UART_Receive+0x76>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b18:	e02d      	b.n	8003b76 <HAL_UART_Receive+0xd2>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	22ff      	movs	r2, #255	; 0xff
 8003b1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b22:	e028      	b.n	8003b76 <HAL_UART_Receive+0xd2>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_UART_Receive+0xa4>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <HAL_UART_Receive+0x9a>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	22ff      	movs	r2, #255	; 0xff
 8003b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b3c:	e01b      	b.n	8003b76 <HAL_UART_Receive+0xd2>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	227f      	movs	r2, #127	; 0x7f
 8003b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b46:	e016      	b.n	8003b76 <HAL_UART_Receive+0xd2>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b50:	d10d      	bne.n	8003b6e <HAL_UART_Receive+0xca>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_UART_Receive+0xc0>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	227f      	movs	r2, #127	; 0x7f
 8003b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b62:	e008      	b.n	8003b76 <HAL_UART_Receive+0xd2>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	223f      	movs	r2, #63	; 0x3f
 8003b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b6c:	e003      	b.n	8003b76 <HAL_UART_Receive+0xd2>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b7c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b86:	d108      	bne.n	8003b9a <HAL_UART_Receive+0xf6>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	e003      	b.n	8003ba2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ba2:	e037      	b.n	8003c14 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2120      	movs	r1, #32
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fc44 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e033      	b.n	8003c2e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10c      	bne.n	8003be6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	8a7b      	ldrh	r3, [r7, #18]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e00d      	b.n	8003c02 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	8a7b      	ldrh	r3, [r7, #18]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1c1      	bne.n	8003ba4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e000      	b.n	8003c2e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c3c:	b08a      	sub	sp, #40	; 0x28
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4ba4      	ldr	r3, [pc, #656]	; (8003ef8 <UART_SetConfig+0x2c0>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	6812      	ldr	r2, [r2, #0]
 8003c6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a99      	ldr	r2, [pc, #612]	; (8003efc <UART_SetConfig+0x2c4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d004      	beq.n	8003ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <UART_SetConfig+0x2c8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d126      	bne.n	8003d10 <UART_SetConfig+0xd8>
 8003cc2:	4b90      	ldr	r3, [pc, #576]	; (8003f04 <UART_SetConfig+0x2cc>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d81b      	bhi.n	8003d08 <UART_SetConfig+0xd0>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0xa0>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cf9 	.word	0x08003cf9
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d01 	.word	0x08003d01
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e116      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e112      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfe:	e10e      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d00:	2308      	movs	r3, #8
 8003d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d06:	e10a      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d08:	2310      	movs	r3, #16
 8003d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0e:	e106      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a7c      	ldr	r2, [pc, #496]	; (8003f08 <UART_SetConfig+0x2d0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d138      	bne.n	8003d8c <UART_SetConfig+0x154>
 8003d1a:	4b7a      	ldr	r3, [pc, #488]	; (8003f04 <UART_SetConfig+0x2cc>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d82d      	bhi.n	8003d84 <UART_SetConfig+0x14c>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0xf8>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d65 	.word	0x08003d65
 8003d34:	08003d85 	.word	0x08003d85
 8003d38:	08003d85 	.word	0x08003d85
 8003d3c:	08003d85 	.word	0x08003d85
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003d85 	.word	0x08003d85
 8003d48:	08003d85 	.word	0x08003d85
 8003d4c:	08003d85 	.word	0x08003d85
 8003d50:	08003d6d 	.word	0x08003d6d
 8003d54:	08003d85 	.word	0x08003d85
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	08003d7d 	.word	0x08003d7d
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e0d8      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e0d4      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d74:	2304      	movs	r3, #4
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e0d0      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e0cc      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e0c8      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5e      	ldr	r2, [pc, #376]	; (8003f0c <UART_SetConfig+0x2d4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d125      	bne.n	8003de2 <UART_SetConfig+0x1aa>
 8003d96:	4b5b      	ldr	r3, [pc, #364]	; (8003f04 <UART_SetConfig+0x2cc>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003da0:	2b30      	cmp	r3, #48	; 0x30
 8003da2:	d016      	beq.n	8003dd2 <UART_SetConfig+0x19a>
 8003da4:	2b30      	cmp	r3, #48	; 0x30
 8003da6:	d818      	bhi.n	8003dda <UART_SetConfig+0x1a2>
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d00a      	beq.n	8003dc2 <UART_SetConfig+0x18a>
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d814      	bhi.n	8003dda <UART_SetConfig+0x1a2>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <UART_SetConfig+0x182>
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d008      	beq.n	8003dca <UART_SetConfig+0x192>
 8003db8:	e00f      	b.n	8003dda <UART_SetConfig+0x1a2>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc0:	e0ad      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc8:	e0a9      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd0:	e0a5      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd8:	e0a1      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003dda:	2310      	movs	r3, #16
 8003ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de0:	e09d      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4a      	ldr	r2, [pc, #296]	; (8003f10 <UART_SetConfig+0x2d8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d125      	bne.n	8003e38 <UART_SetConfig+0x200>
 8003dec:	4b45      	ldr	r3, [pc, #276]	; (8003f04 <UART_SetConfig+0x2cc>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003df6:	2bc0      	cmp	r3, #192	; 0xc0
 8003df8:	d016      	beq.n	8003e28 <UART_SetConfig+0x1f0>
 8003dfa:	2bc0      	cmp	r3, #192	; 0xc0
 8003dfc:	d818      	bhi.n	8003e30 <UART_SetConfig+0x1f8>
 8003dfe:	2b80      	cmp	r3, #128	; 0x80
 8003e00:	d00a      	beq.n	8003e18 <UART_SetConfig+0x1e0>
 8003e02:	2b80      	cmp	r3, #128	; 0x80
 8003e04:	d814      	bhi.n	8003e30 <UART_SetConfig+0x1f8>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <UART_SetConfig+0x1d8>
 8003e0a:	2b40      	cmp	r3, #64	; 0x40
 8003e0c:	d008      	beq.n	8003e20 <UART_SetConfig+0x1e8>
 8003e0e:	e00f      	b.n	8003e30 <UART_SetConfig+0x1f8>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e082      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1e:	e07e      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e20:	2304      	movs	r3, #4
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e26:	e07a      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2e:	e076      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e36:	e072      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a35      	ldr	r2, [pc, #212]	; (8003f14 <UART_SetConfig+0x2dc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d12a      	bne.n	8003e98 <UART_SetConfig+0x260>
 8003e42:	4b30      	ldr	r3, [pc, #192]	; (8003f04 <UART_SetConfig+0x2cc>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e50:	d01a      	beq.n	8003e88 <UART_SetConfig+0x250>
 8003e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e56:	d81b      	bhi.n	8003e90 <UART_SetConfig+0x258>
 8003e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5c:	d00c      	beq.n	8003e78 <UART_SetConfig+0x240>
 8003e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e62:	d815      	bhi.n	8003e90 <UART_SetConfig+0x258>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <UART_SetConfig+0x238>
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6c:	d008      	beq.n	8003e80 <UART_SetConfig+0x248>
 8003e6e:	e00f      	b.n	8003e90 <UART_SetConfig+0x258>
 8003e70:	2300      	movs	r3, #0
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e76:	e052      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7e:	e04e      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e80:	2304      	movs	r3, #4
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e86:	e04a      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e88:	2308      	movs	r3, #8
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8e:	e046      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e90:	2310      	movs	r3, #16
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e96:	e042      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a17      	ldr	r2, [pc, #92]	; (8003efc <UART_SetConfig+0x2c4>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d13a      	bne.n	8003f18 <UART_SetConfig+0x2e0>
 8003ea2:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <UART_SetConfig+0x2cc>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003eac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eb0:	d01a      	beq.n	8003ee8 <UART_SetConfig+0x2b0>
 8003eb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eb6:	d81b      	bhi.n	8003ef0 <UART_SetConfig+0x2b8>
 8003eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ebc:	d00c      	beq.n	8003ed8 <UART_SetConfig+0x2a0>
 8003ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec2:	d815      	bhi.n	8003ef0 <UART_SetConfig+0x2b8>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <UART_SetConfig+0x298>
 8003ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ecc:	d008      	beq.n	8003ee0 <UART_SetConfig+0x2a8>
 8003ece:	e00f      	b.n	8003ef0 <UART_SetConfig+0x2b8>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed6:	e022      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ede:	e01e      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee6:	e01a      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eee:	e016      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ef6:	e012      	b.n	8003f1e <UART_SetConfig+0x2e6>
 8003ef8:	efff69f3 	.word	0xefff69f3
 8003efc:	40008000 	.word	0x40008000
 8003f00:	40013800 	.word	0x40013800
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40004400 	.word	0x40004400
 8003f0c:	40004800 	.word	0x40004800
 8003f10:	40004c00 	.word	0x40004c00
 8003f14:	40005000 	.word	0x40005000
 8003f18:	2310      	movs	r3, #16
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a9f      	ldr	r2, [pc, #636]	; (80041a0 <UART_SetConfig+0x568>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d17a      	bne.n	800401e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d824      	bhi.n	8003f7a <UART_SetConfig+0x342>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x300>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f6b 	.word	0x08003f6b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f7b 	.word	0x08003f7b
 8003f54:	08003f7b 	.word	0x08003f7b
 8003f58:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7fe f8d0 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003f60:	61f8      	str	r0, [r7, #28]
        break;
 8003f62:	e010      	b.n	8003f86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b8f      	ldr	r3, [pc, #572]	; (80041a4 <UART_SetConfig+0x56c>)
 8003f66:	61fb      	str	r3, [r7, #28]
        break;
 8003f68:	e00d      	b.n	8003f86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe f831 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	61f8      	str	r0, [r7, #28]
        break;
 8003f70:	e009      	b.n	8003f86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	61fb      	str	r3, [r7, #28]
        break;
 8003f78:	e005      	b.n	8003f86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80fb 	beq.w	8004184 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d305      	bcc.n	8003faa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d903      	bls.n	8003fb2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fb0:	e0e8      	b.n	8004184 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	461c      	mov	r4, r3
 8003fb8:	4615      	mov	r5, r2
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	022b      	lsls	r3, r5, #8
 8003fc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fc8:	0222      	lsls	r2, r4, #8
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	6849      	ldr	r1, [r1, #4]
 8003fce:	0849      	lsrs	r1, r1, #1
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	4688      	mov	r8, r1
 8003fd4:	4681      	mov	r9, r0
 8003fd6:	eb12 0a08 	adds.w	sl, r2, r8
 8003fda:	eb43 0b09 	adc.w	fp, r3, r9
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fec:	4650      	mov	r0, sl
 8003fee:	4659      	mov	r1, fp
 8003ff0:	f7fc f93e 	bl	8000270 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004002:	d308      	bcc.n	8004016 <UART_SetConfig+0x3de>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400a:	d204      	bcs.n	8004016 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	e0b6      	b.n	8004184 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800401c:	e0b2      	b.n	8004184 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d15e      	bne.n	80040e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004028:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402c:	2b08      	cmp	r3, #8
 800402e:	d828      	bhi.n	8004082 <UART_SetConfig+0x44a>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x400>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004083 	.word	0x08004083
 8004048:	08004073 	.word	0x08004073
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
 8004058:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fe f850 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8004060:	61f8      	str	r0, [r7, #28]
        break;
 8004062:	e014      	b.n	800408e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7fe f862 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 8004068:	61f8      	str	r0, [r7, #28]
        break;
 800406a:	e010      	b.n	800408e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <UART_SetConfig+0x56c>)
 800406e:	61fb      	str	r3, [r7, #28]
        break;
 8004070:	e00d      	b.n	800408e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fd ffad 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8004076:	61f8      	str	r0, [r7, #28]
        break;
 8004078:	e009      	b.n	800408e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	61fb      	str	r3, [r7, #28]
        break;
 8004080:	e005      	b.n	800408e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800408c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d077      	beq.n	8004184 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005a      	lsls	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	441a      	add	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d916      	bls.n	80040de <UART_SetConfig+0x4a6>
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d212      	bcs.n	80040de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f023 030f 	bic.w	r3, r3, #15
 80040c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	8afb      	ldrh	r3, [r7, #22]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	8afa      	ldrh	r2, [r7, #22]
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	e052      	b.n	8004184 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040e4:	e04e      	b.n	8004184 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d827      	bhi.n	800413e <UART_SetConfig+0x506>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0x4bc>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004121 	.word	0x08004121
 80040fc:	08004129 	.word	0x08004129
 8004100:	0800413f 	.word	0x0800413f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800413f 	.word	0x0800413f
 800410c:	0800413f 	.word	0x0800413f
 8004110:	0800413f 	.word	0x0800413f
 8004114:	08004137 	.word	0x08004137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7fd fff2 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e014      	b.n	800414a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe f804 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 8004124:	61f8      	str	r0, [r7, #28]
        break;
 8004126:	e010      	b.n	800414a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004128:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <UART_SetConfig+0x56c>)
 800412a:	61fb      	str	r3, [r7, #28]
        break;
 800412c:	e00d      	b.n	800414a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fd ff4f 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8004132:	61f8      	str	r0, [r7, #28]
        break;
 8004134:	e009      	b.n	800414a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413a:	61fb      	str	r3, [r7, #28]
        break;
 800413c:	e005      	b.n	800414a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004148:	bf00      	nop
    }

    if (pclk != 0U)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d019      	beq.n	8004184 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	085a      	lsrs	r2, r3, #1
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	441a      	add	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b0f      	cmp	r3, #15
 8004168:	d909      	bls.n	800417e <UART_SetConfig+0x546>
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004170:	d205      	bcs.n	800417e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	e002      	b.n	8004184 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004190:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004194:	4618      	mov	r0, r3
 8004196:	3728      	adds	r7, #40	; 0x28
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	40008000 	.word	0x40008000
 80041a4:	00f42400 	.word	0x00f42400

080041a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01a      	beq.n	80042be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a6:	d10a      	bne.n	80042be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b098      	sub	sp, #96	; 0x60
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042fc:	f7fc fe74 	bl	8000fe8 <HAL_GetTick>
 8004300:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b08      	cmp	r3, #8
 800430e:	d12e      	bne.n	800436e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f88c 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d021      	beq.n	800436e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433e:	653b      	str	r3, [r7, #80]	; 0x50
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004348:	647b      	str	r3, [r7, #68]	; 0x44
 800434a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800434e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e6      	bne.n	800432a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e062      	b.n	8004434 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b04      	cmp	r3, #4
 800437a:	d149      	bne.n	8004410 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004384:	2200      	movs	r2, #0
 8004386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f856 	bl	800443c <UART_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03c      	beq.n	8004410 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	623b      	str	r3, [r7, #32]
   return(result);
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
 80043b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e6      	bne.n	8004396 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0301 	bic.w	r3, r3, #1
 80043de:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e8:	61fa      	str	r2, [r7, #28]
 80043ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	69b9      	ldr	r1, [r7, #24]
 80043ee:	69fa      	ldr	r2, [r7, #28]
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	617b      	str	r3, [r7, #20]
   return(result);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e011      	b.n	8004434 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3758      	adds	r7, #88	; 0x58
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444c:	e049      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d045      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004456:	f7fc fdc7 	bl	8000fe8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	429a      	cmp	r2, r3
 8004464:	d302      	bcc.n	800446c <UART_WaitOnFlagUntilTimeout+0x30>
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e048      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0304 	and.w	r3, r3, #4
 800447a:	2b00      	cmp	r3, #0
 800447c:	d031      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d110      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2208      	movs	r2, #8
 8004492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f838 	bl	800450a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2208      	movs	r2, #8
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e029      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044bc:	d111      	bne.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f81e 	bl	800450a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e00f      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d0a6      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b095      	sub	sp, #84	; 0x54
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	643b      	str	r3, [r7, #64]	; 0x40
 8004532:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e6      	bne.n	8004512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	61fb      	str	r3, [r7, #28]
   return(result);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	64bb      	str	r3, [r7, #72]	; 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800456a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457c:	2b01      	cmp	r3, #1
 800457e:	d118      	bne.n	80045b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	60bb      	str	r3, [r7, #8]
   return(result);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	647b      	str	r3, [r7, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	613b      	str	r3, [r7, #16]
   return(result);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045c6:	bf00      	nop
 80045c8:	3754      	adds	r7, #84	; 0x54
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <__errno>:
 80045d4:	4b01      	ldr	r3, [pc, #4]	; (80045dc <__errno+0x8>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000040 	.word	0x20000040

080045e0 <__libc_init_array>:
 80045e0:	b570      	push	{r4, r5, r6, lr}
 80045e2:	4d0d      	ldr	r5, [pc, #52]	; (8004618 <__libc_init_array+0x38>)
 80045e4:	4c0d      	ldr	r4, [pc, #52]	; (800461c <__libc_init_array+0x3c>)
 80045e6:	1b64      	subs	r4, r4, r5
 80045e8:	10a4      	asrs	r4, r4, #2
 80045ea:	2600      	movs	r6, #0
 80045ec:	42a6      	cmp	r6, r4
 80045ee:	d109      	bne.n	8004604 <__libc_init_array+0x24>
 80045f0:	4d0b      	ldr	r5, [pc, #44]	; (8004620 <__libc_init_array+0x40>)
 80045f2:	4c0c      	ldr	r4, [pc, #48]	; (8004624 <__libc_init_array+0x44>)
 80045f4:	f000 fc8e 	bl	8004f14 <_init>
 80045f8:	1b64      	subs	r4, r4, r5
 80045fa:	10a4      	asrs	r4, r4, #2
 80045fc:	2600      	movs	r6, #0
 80045fe:	42a6      	cmp	r6, r4
 8004600:	d105      	bne.n	800460e <__libc_init_array+0x2e>
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	f855 3b04 	ldr.w	r3, [r5], #4
 8004608:	4798      	blx	r3
 800460a:	3601      	adds	r6, #1
 800460c:	e7ee      	b.n	80045ec <__libc_init_array+0xc>
 800460e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004612:	4798      	blx	r3
 8004614:	3601      	adds	r6, #1
 8004616:	e7f2      	b.n	80045fe <__libc_init_array+0x1e>
 8004618:	08005030 	.word	0x08005030
 800461c:	08005030 	.word	0x08005030
 8004620:	08005030 	.word	0x08005030
 8004624:	08005034 	.word	0x08005034

08004628 <memcpy>:
 8004628:	440a      	add	r2, r1
 800462a:	4291      	cmp	r1, r2
 800462c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004630:	d100      	bne.n	8004634 <memcpy+0xc>
 8004632:	4770      	bx	lr
 8004634:	b510      	push	{r4, lr}
 8004636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800463a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800463e:	4291      	cmp	r1, r2
 8004640:	d1f9      	bne.n	8004636 <memcpy+0xe>
 8004642:	bd10      	pop	{r4, pc}

08004644 <memset>:
 8004644:	4402      	add	r2, r0
 8004646:	4603      	mov	r3, r0
 8004648:	4293      	cmp	r3, r2
 800464a:	d100      	bne.n	800464e <memset+0xa>
 800464c:	4770      	bx	lr
 800464e:	f803 1b01 	strb.w	r1, [r3], #1
 8004652:	e7f9      	b.n	8004648 <memset+0x4>

08004654 <siprintf>:
 8004654:	b40e      	push	{r1, r2, r3}
 8004656:	b500      	push	{lr}
 8004658:	b09c      	sub	sp, #112	; 0x70
 800465a:	ab1d      	add	r3, sp, #116	; 0x74
 800465c:	9002      	str	r0, [sp, #8]
 800465e:	9006      	str	r0, [sp, #24]
 8004660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004664:	4809      	ldr	r0, [pc, #36]	; (800468c <siprintf+0x38>)
 8004666:	9107      	str	r1, [sp, #28]
 8004668:	9104      	str	r1, [sp, #16]
 800466a:	4909      	ldr	r1, [pc, #36]	; (8004690 <siprintf+0x3c>)
 800466c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004670:	9105      	str	r1, [sp, #20]
 8004672:	6800      	ldr	r0, [r0, #0]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	a902      	add	r1, sp, #8
 8004678:	f000 f868 	bl	800474c <_svfiprintf_r>
 800467c:	9b02      	ldr	r3, [sp, #8]
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	b01c      	add	sp, #112	; 0x70
 8004684:	f85d eb04 	ldr.w	lr, [sp], #4
 8004688:	b003      	add	sp, #12
 800468a:	4770      	bx	lr
 800468c:	20000040 	.word	0x20000040
 8004690:	ffff0208 	.word	0xffff0208

08004694 <__ssputs_r>:
 8004694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004698:	688e      	ldr	r6, [r1, #8]
 800469a:	429e      	cmp	r6, r3
 800469c:	4682      	mov	sl, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	4690      	mov	r8, r2
 80046a2:	461f      	mov	r7, r3
 80046a4:	d838      	bhi.n	8004718 <__ssputs_r+0x84>
 80046a6:	898a      	ldrh	r2, [r1, #12]
 80046a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046ac:	d032      	beq.n	8004714 <__ssputs_r+0x80>
 80046ae:	6825      	ldr	r5, [r4, #0]
 80046b0:	6909      	ldr	r1, [r1, #16]
 80046b2:	eba5 0901 	sub.w	r9, r5, r1
 80046b6:	6965      	ldr	r5, [r4, #20]
 80046b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046c0:	3301      	adds	r3, #1
 80046c2:	444b      	add	r3, r9
 80046c4:	106d      	asrs	r5, r5, #1
 80046c6:	429d      	cmp	r5, r3
 80046c8:	bf38      	it	cc
 80046ca:	461d      	movcc	r5, r3
 80046cc:	0553      	lsls	r3, r2, #21
 80046ce:	d531      	bpl.n	8004734 <__ssputs_r+0xa0>
 80046d0:	4629      	mov	r1, r5
 80046d2:	f000 fb55 	bl	8004d80 <_malloc_r>
 80046d6:	4606      	mov	r6, r0
 80046d8:	b950      	cbnz	r0, 80046f0 <__ssputs_r+0x5c>
 80046da:	230c      	movs	r3, #12
 80046dc:	f8ca 3000 	str.w	r3, [sl]
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f0:	6921      	ldr	r1, [r4, #16]
 80046f2:	464a      	mov	r2, r9
 80046f4:	f7ff ff98 	bl	8004628 <memcpy>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	6126      	str	r6, [r4, #16]
 8004706:	6165      	str	r5, [r4, #20]
 8004708:	444e      	add	r6, r9
 800470a:	eba5 0509 	sub.w	r5, r5, r9
 800470e:	6026      	str	r6, [r4, #0]
 8004710:	60a5      	str	r5, [r4, #8]
 8004712:	463e      	mov	r6, r7
 8004714:	42be      	cmp	r6, r7
 8004716:	d900      	bls.n	800471a <__ssputs_r+0x86>
 8004718:	463e      	mov	r6, r7
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	4632      	mov	r2, r6
 800471e:	4641      	mov	r1, r8
 8004720:	f000 faa8 	bl	8004c74 <memmove>
 8004724:	68a3      	ldr	r3, [r4, #8]
 8004726:	1b9b      	subs	r3, r3, r6
 8004728:	60a3      	str	r3, [r4, #8]
 800472a:	6823      	ldr	r3, [r4, #0]
 800472c:	4433      	add	r3, r6
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	2000      	movs	r0, #0
 8004732:	e7db      	b.n	80046ec <__ssputs_r+0x58>
 8004734:	462a      	mov	r2, r5
 8004736:	f000 fb97 	bl	8004e68 <_realloc_r>
 800473a:	4606      	mov	r6, r0
 800473c:	2800      	cmp	r0, #0
 800473e:	d1e1      	bne.n	8004704 <__ssputs_r+0x70>
 8004740:	6921      	ldr	r1, [r4, #16]
 8004742:	4650      	mov	r0, sl
 8004744:	f000 fab0 	bl	8004ca8 <_free_r>
 8004748:	e7c7      	b.n	80046da <__ssputs_r+0x46>
	...

0800474c <_svfiprintf_r>:
 800474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004750:	4698      	mov	r8, r3
 8004752:	898b      	ldrh	r3, [r1, #12]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	b09d      	sub	sp, #116	; 0x74
 8004758:	4607      	mov	r7, r0
 800475a:	460d      	mov	r5, r1
 800475c:	4614      	mov	r4, r2
 800475e:	d50e      	bpl.n	800477e <_svfiprintf_r+0x32>
 8004760:	690b      	ldr	r3, [r1, #16]
 8004762:	b963      	cbnz	r3, 800477e <_svfiprintf_r+0x32>
 8004764:	2140      	movs	r1, #64	; 0x40
 8004766:	f000 fb0b 	bl	8004d80 <_malloc_r>
 800476a:	6028      	str	r0, [r5, #0]
 800476c:	6128      	str	r0, [r5, #16]
 800476e:	b920      	cbnz	r0, 800477a <_svfiprintf_r+0x2e>
 8004770:	230c      	movs	r3, #12
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	e0d1      	b.n	800491e <_svfiprintf_r+0x1d2>
 800477a:	2340      	movs	r3, #64	; 0x40
 800477c:	616b      	str	r3, [r5, #20]
 800477e:	2300      	movs	r3, #0
 8004780:	9309      	str	r3, [sp, #36]	; 0x24
 8004782:	2320      	movs	r3, #32
 8004784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004788:	f8cd 800c 	str.w	r8, [sp, #12]
 800478c:	2330      	movs	r3, #48	; 0x30
 800478e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004938 <_svfiprintf_r+0x1ec>
 8004792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004796:	f04f 0901 	mov.w	r9, #1
 800479a:	4623      	mov	r3, r4
 800479c:	469a      	mov	sl, r3
 800479e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a2:	b10a      	cbz	r2, 80047a8 <_svfiprintf_r+0x5c>
 80047a4:	2a25      	cmp	r2, #37	; 0x25
 80047a6:	d1f9      	bne.n	800479c <_svfiprintf_r+0x50>
 80047a8:	ebba 0b04 	subs.w	fp, sl, r4
 80047ac:	d00b      	beq.n	80047c6 <_svfiprintf_r+0x7a>
 80047ae:	465b      	mov	r3, fp
 80047b0:	4622      	mov	r2, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	4638      	mov	r0, r7
 80047b6:	f7ff ff6d 	bl	8004694 <__ssputs_r>
 80047ba:	3001      	adds	r0, #1
 80047bc:	f000 80aa 	beq.w	8004914 <_svfiprintf_r+0x1c8>
 80047c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c2:	445a      	add	r2, fp
 80047c4:	9209      	str	r2, [sp, #36]	; 0x24
 80047c6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80a2 	beq.w	8004914 <_svfiprintf_r+0x1c8>
 80047d0:	2300      	movs	r3, #0
 80047d2:	f04f 32ff 	mov.w	r2, #4294967295
 80047d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047da:	f10a 0a01 	add.w	sl, sl, #1
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	9307      	str	r3, [sp, #28]
 80047e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047e6:	931a      	str	r3, [sp, #104]	; 0x68
 80047e8:	4654      	mov	r4, sl
 80047ea:	2205      	movs	r2, #5
 80047ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f0:	4851      	ldr	r0, [pc, #324]	; (8004938 <_svfiprintf_r+0x1ec>)
 80047f2:	f7fb fced 	bl	80001d0 <memchr>
 80047f6:	9a04      	ldr	r2, [sp, #16]
 80047f8:	b9d8      	cbnz	r0, 8004832 <_svfiprintf_r+0xe6>
 80047fa:	06d0      	lsls	r0, r2, #27
 80047fc:	bf44      	itt	mi
 80047fe:	2320      	movmi	r3, #32
 8004800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004804:	0711      	lsls	r1, r2, #28
 8004806:	bf44      	itt	mi
 8004808:	232b      	movmi	r3, #43	; 0x2b
 800480a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800480e:	f89a 3000 	ldrb.w	r3, [sl]
 8004812:	2b2a      	cmp	r3, #42	; 0x2a
 8004814:	d015      	beq.n	8004842 <_svfiprintf_r+0xf6>
 8004816:	9a07      	ldr	r2, [sp, #28]
 8004818:	4654      	mov	r4, sl
 800481a:	2000      	movs	r0, #0
 800481c:	f04f 0c0a 	mov.w	ip, #10
 8004820:	4621      	mov	r1, r4
 8004822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004826:	3b30      	subs	r3, #48	; 0x30
 8004828:	2b09      	cmp	r3, #9
 800482a:	d94e      	bls.n	80048ca <_svfiprintf_r+0x17e>
 800482c:	b1b0      	cbz	r0, 800485c <_svfiprintf_r+0x110>
 800482e:	9207      	str	r2, [sp, #28]
 8004830:	e014      	b.n	800485c <_svfiprintf_r+0x110>
 8004832:	eba0 0308 	sub.w	r3, r0, r8
 8004836:	fa09 f303 	lsl.w	r3, r9, r3
 800483a:	4313      	orrs	r3, r2
 800483c:	9304      	str	r3, [sp, #16]
 800483e:	46a2      	mov	sl, r4
 8004840:	e7d2      	b.n	80047e8 <_svfiprintf_r+0x9c>
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	1d19      	adds	r1, r3, #4
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	9103      	str	r1, [sp, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	bfbb      	ittet	lt
 800484e:	425b      	neglt	r3, r3
 8004850:	f042 0202 	orrlt.w	r2, r2, #2
 8004854:	9307      	strge	r3, [sp, #28]
 8004856:	9307      	strlt	r3, [sp, #28]
 8004858:	bfb8      	it	lt
 800485a:	9204      	strlt	r2, [sp, #16]
 800485c:	7823      	ldrb	r3, [r4, #0]
 800485e:	2b2e      	cmp	r3, #46	; 0x2e
 8004860:	d10c      	bne.n	800487c <_svfiprintf_r+0x130>
 8004862:	7863      	ldrb	r3, [r4, #1]
 8004864:	2b2a      	cmp	r3, #42	; 0x2a
 8004866:	d135      	bne.n	80048d4 <_svfiprintf_r+0x188>
 8004868:	9b03      	ldr	r3, [sp, #12]
 800486a:	1d1a      	adds	r2, r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	9203      	str	r2, [sp, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	bfb8      	it	lt
 8004874:	f04f 33ff 	movlt.w	r3, #4294967295
 8004878:	3402      	adds	r4, #2
 800487a:	9305      	str	r3, [sp, #20]
 800487c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004948 <_svfiprintf_r+0x1fc>
 8004880:	7821      	ldrb	r1, [r4, #0]
 8004882:	2203      	movs	r2, #3
 8004884:	4650      	mov	r0, sl
 8004886:	f7fb fca3 	bl	80001d0 <memchr>
 800488a:	b140      	cbz	r0, 800489e <_svfiprintf_r+0x152>
 800488c:	2340      	movs	r3, #64	; 0x40
 800488e:	eba0 000a 	sub.w	r0, r0, sl
 8004892:	fa03 f000 	lsl.w	r0, r3, r0
 8004896:	9b04      	ldr	r3, [sp, #16]
 8004898:	4303      	orrs	r3, r0
 800489a:	3401      	adds	r4, #1
 800489c:	9304      	str	r3, [sp, #16]
 800489e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a2:	4826      	ldr	r0, [pc, #152]	; (800493c <_svfiprintf_r+0x1f0>)
 80048a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048a8:	2206      	movs	r2, #6
 80048aa:	f7fb fc91 	bl	80001d0 <memchr>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d038      	beq.n	8004924 <_svfiprintf_r+0x1d8>
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <_svfiprintf_r+0x1f4>)
 80048b4:	bb1b      	cbnz	r3, 80048fe <_svfiprintf_r+0x1b2>
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	3307      	adds	r3, #7
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	3308      	adds	r3, #8
 80048c0:	9303      	str	r3, [sp, #12]
 80048c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c4:	4433      	add	r3, r6
 80048c6:	9309      	str	r3, [sp, #36]	; 0x24
 80048c8:	e767      	b.n	800479a <_svfiprintf_r+0x4e>
 80048ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ce:	460c      	mov	r4, r1
 80048d0:	2001      	movs	r0, #1
 80048d2:	e7a5      	b.n	8004820 <_svfiprintf_r+0xd4>
 80048d4:	2300      	movs	r3, #0
 80048d6:	3401      	adds	r4, #1
 80048d8:	9305      	str	r3, [sp, #20]
 80048da:	4619      	mov	r1, r3
 80048dc:	f04f 0c0a 	mov.w	ip, #10
 80048e0:	4620      	mov	r0, r4
 80048e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048e6:	3a30      	subs	r2, #48	; 0x30
 80048e8:	2a09      	cmp	r2, #9
 80048ea:	d903      	bls.n	80048f4 <_svfiprintf_r+0x1a8>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0c5      	beq.n	800487c <_svfiprintf_r+0x130>
 80048f0:	9105      	str	r1, [sp, #20]
 80048f2:	e7c3      	b.n	800487c <_svfiprintf_r+0x130>
 80048f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048f8:	4604      	mov	r4, r0
 80048fa:	2301      	movs	r3, #1
 80048fc:	e7f0      	b.n	80048e0 <_svfiprintf_r+0x194>
 80048fe:	ab03      	add	r3, sp, #12
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	462a      	mov	r2, r5
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <_svfiprintf_r+0x1f8>)
 8004906:	a904      	add	r1, sp, #16
 8004908:	4638      	mov	r0, r7
 800490a:	f3af 8000 	nop.w
 800490e:	1c42      	adds	r2, r0, #1
 8004910:	4606      	mov	r6, r0
 8004912:	d1d6      	bne.n	80048c2 <_svfiprintf_r+0x176>
 8004914:	89ab      	ldrh	r3, [r5, #12]
 8004916:	065b      	lsls	r3, r3, #25
 8004918:	f53f af2c 	bmi.w	8004774 <_svfiprintf_r+0x28>
 800491c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800491e:	b01d      	add	sp, #116	; 0x74
 8004920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004924:	ab03      	add	r3, sp, #12
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	462a      	mov	r2, r5
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <_svfiprintf_r+0x1f8>)
 800492c:	a904      	add	r1, sp, #16
 800492e:	4638      	mov	r0, r7
 8004930:	f000 f87a 	bl	8004a28 <_printf_i>
 8004934:	e7eb      	b.n	800490e <_svfiprintf_r+0x1c2>
 8004936:	bf00      	nop
 8004938:	08004ff4 	.word	0x08004ff4
 800493c:	08004ffe 	.word	0x08004ffe
 8004940:	00000000 	.word	0x00000000
 8004944:	08004695 	.word	0x08004695
 8004948:	08004ffa 	.word	0x08004ffa

0800494c <_printf_common>:
 800494c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	4616      	mov	r6, r2
 8004952:	4699      	mov	r9, r3
 8004954:	688a      	ldr	r2, [r1, #8]
 8004956:	690b      	ldr	r3, [r1, #16]
 8004958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800495c:	4293      	cmp	r3, r2
 800495e:	bfb8      	it	lt
 8004960:	4613      	movlt	r3, r2
 8004962:	6033      	str	r3, [r6, #0]
 8004964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004968:	4607      	mov	r7, r0
 800496a:	460c      	mov	r4, r1
 800496c:	b10a      	cbz	r2, 8004972 <_printf_common+0x26>
 800496e:	3301      	adds	r3, #1
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	0699      	lsls	r1, r3, #26
 8004976:	bf42      	ittt	mi
 8004978:	6833      	ldrmi	r3, [r6, #0]
 800497a:	3302      	addmi	r3, #2
 800497c:	6033      	strmi	r3, [r6, #0]
 800497e:	6825      	ldr	r5, [r4, #0]
 8004980:	f015 0506 	ands.w	r5, r5, #6
 8004984:	d106      	bne.n	8004994 <_printf_common+0x48>
 8004986:	f104 0a19 	add.w	sl, r4, #25
 800498a:	68e3      	ldr	r3, [r4, #12]
 800498c:	6832      	ldr	r2, [r6, #0]
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	42ab      	cmp	r3, r5
 8004992:	dc26      	bgt.n	80049e2 <_printf_common+0x96>
 8004994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004998:	1e13      	subs	r3, r2, #0
 800499a:	6822      	ldr	r2, [r4, #0]
 800499c:	bf18      	it	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	0692      	lsls	r2, r2, #26
 80049a2:	d42b      	bmi.n	80049fc <_printf_common+0xb0>
 80049a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d01e      	beq.n	80049f0 <_printf_common+0xa4>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	68e5      	ldr	r5, [r4, #12]
 80049b6:	6832      	ldr	r2, [r6, #0]
 80049b8:	f003 0306 	and.w	r3, r3, #6
 80049bc:	2b04      	cmp	r3, #4
 80049be:	bf08      	it	eq
 80049c0:	1aad      	subeq	r5, r5, r2
 80049c2:	68a3      	ldr	r3, [r4, #8]
 80049c4:	6922      	ldr	r2, [r4, #16]
 80049c6:	bf0c      	ite	eq
 80049c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049cc:	2500      	movne	r5, #0
 80049ce:	4293      	cmp	r3, r2
 80049d0:	bfc4      	itt	gt
 80049d2:	1a9b      	subgt	r3, r3, r2
 80049d4:	18ed      	addgt	r5, r5, r3
 80049d6:	2600      	movs	r6, #0
 80049d8:	341a      	adds	r4, #26
 80049da:	42b5      	cmp	r5, r6
 80049dc:	d11a      	bne.n	8004a14 <_printf_common+0xc8>
 80049de:	2000      	movs	r0, #0
 80049e0:	e008      	b.n	80049f4 <_printf_common+0xa8>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4652      	mov	r2, sl
 80049e6:	4649      	mov	r1, r9
 80049e8:	4638      	mov	r0, r7
 80049ea:	47c0      	blx	r8
 80049ec:	3001      	adds	r0, #1
 80049ee:	d103      	bne.n	80049f8 <_printf_common+0xac>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	3501      	adds	r5, #1
 80049fa:	e7c6      	b.n	800498a <_printf_common+0x3e>
 80049fc:	18e1      	adds	r1, r4, r3
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	2030      	movs	r0, #48	; 0x30
 8004a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a06:	4422      	add	r2, r4
 8004a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a10:	3302      	adds	r3, #2
 8004a12:	e7c7      	b.n	80049a4 <_printf_common+0x58>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4622      	mov	r2, r4
 8004a18:	4649      	mov	r1, r9
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d0e6      	beq.n	80049f0 <_printf_common+0xa4>
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7d9      	b.n	80049da <_printf_common+0x8e>
	...

08004a28 <_printf_i>:
 8004a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	7e0f      	ldrb	r7, [r1, #24]
 8004a2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a30:	2f78      	cmp	r7, #120	; 0x78
 8004a32:	4691      	mov	r9, r2
 8004a34:	4680      	mov	r8, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	469a      	mov	sl, r3
 8004a3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a3e:	d807      	bhi.n	8004a50 <_printf_i+0x28>
 8004a40:	2f62      	cmp	r7, #98	; 0x62
 8004a42:	d80a      	bhi.n	8004a5a <_printf_i+0x32>
 8004a44:	2f00      	cmp	r7, #0
 8004a46:	f000 80d8 	beq.w	8004bfa <_printf_i+0x1d2>
 8004a4a:	2f58      	cmp	r7, #88	; 0x58
 8004a4c:	f000 80a3 	beq.w	8004b96 <_printf_i+0x16e>
 8004a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a58:	e03a      	b.n	8004ad0 <_printf_i+0xa8>
 8004a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a5e:	2b15      	cmp	r3, #21
 8004a60:	d8f6      	bhi.n	8004a50 <_printf_i+0x28>
 8004a62:	a101      	add	r1, pc, #4	; (adr r1, 8004a68 <_printf_i+0x40>)
 8004a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a68:	08004ac1 	.word	0x08004ac1
 8004a6c:	08004ad5 	.word	0x08004ad5
 8004a70:	08004a51 	.word	0x08004a51
 8004a74:	08004a51 	.word	0x08004a51
 8004a78:	08004a51 	.word	0x08004a51
 8004a7c:	08004a51 	.word	0x08004a51
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004a51 	.word	0x08004a51
 8004a88:	08004a51 	.word	0x08004a51
 8004a8c:	08004a51 	.word	0x08004a51
 8004a90:	08004a51 	.word	0x08004a51
 8004a94:	08004be1 	.word	0x08004be1
 8004a98:	08004b05 	.word	0x08004b05
 8004a9c:	08004bc3 	.word	0x08004bc3
 8004aa0:	08004a51 	.word	0x08004a51
 8004aa4:	08004a51 	.word	0x08004a51
 8004aa8:	08004c03 	.word	0x08004c03
 8004aac:	08004a51 	.word	0x08004a51
 8004ab0:	08004b05 	.word	0x08004b05
 8004ab4:	08004a51 	.word	0x08004a51
 8004ab8:	08004a51 	.word	0x08004a51
 8004abc:	08004bcb 	.word	0x08004bcb
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	1d1a      	adds	r2, r3, #4
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	602a      	str	r2, [r5, #0]
 8004ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0a3      	b.n	8004c1c <_printf_i+0x1f4>
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	6829      	ldr	r1, [r5, #0]
 8004ad8:	0606      	lsls	r6, r0, #24
 8004ada:	f101 0304 	add.w	r3, r1, #4
 8004ade:	d50a      	bpl.n	8004af6 <_printf_i+0xce>
 8004ae0:	680e      	ldr	r6, [r1, #0]
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	2e00      	cmp	r6, #0
 8004ae6:	da03      	bge.n	8004af0 <_printf_i+0xc8>
 8004ae8:	232d      	movs	r3, #45	; 0x2d
 8004aea:	4276      	negs	r6, r6
 8004aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af0:	485e      	ldr	r0, [pc, #376]	; (8004c6c <_printf_i+0x244>)
 8004af2:	230a      	movs	r3, #10
 8004af4:	e019      	b.n	8004b2a <_printf_i+0x102>
 8004af6:	680e      	ldr	r6, [r1, #0]
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004afe:	bf18      	it	ne
 8004b00:	b236      	sxthne	r6, r6
 8004b02:	e7ef      	b.n	8004ae4 <_printf_i+0xbc>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	1d19      	adds	r1, r3, #4
 8004b0a:	6029      	str	r1, [r5, #0]
 8004b0c:	0601      	lsls	r1, r0, #24
 8004b0e:	d501      	bpl.n	8004b14 <_printf_i+0xec>
 8004b10:	681e      	ldr	r6, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <_printf_i+0xf2>
 8004b14:	0646      	lsls	r6, r0, #25
 8004b16:	d5fb      	bpl.n	8004b10 <_printf_i+0xe8>
 8004b18:	881e      	ldrh	r6, [r3, #0]
 8004b1a:	4854      	ldr	r0, [pc, #336]	; (8004c6c <_printf_i+0x244>)
 8004b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b1e:	bf0c      	ite	eq
 8004b20:	2308      	moveq	r3, #8
 8004b22:	230a      	movne	r3, #10
 8004b24:	2100      	movs	r1, #0
 8004b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b2a:	6865      	ldr	r5, [r4, #4]
 8004b2c:	60a5      	str	r5, [r4, #8]
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	bfa2      	ittt	ge
 8004b32:	6821      	ldrge	r1, [r4, #0]
 8004b34:	f021 0104 	bicge.w	r1, r1, #4
 8004b38:	6021      	strge	r1, [r4, #0]
 8004b3a:	b90e      	cbnz	r6, 8004b40 <_printf_i+0x118>
 8004b3c:	2d00      	cmp	r5, #0
 8004b3e:	d04d      	beq.n	8004bdc <_printf_i+0x1b4>
 8004b40:	4615      	mov	r5, r2
 8004b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b46:	fb03 6711 	mls	r7, r3, r1, r6
 8004b4a:	5dc7      	ldrb	r7, [r0, r7]
 8004b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b50:	4637      	mov	r7, r6
 8004b52:	42bb      	cmp	r3, r7
 8004b54:	460e      	mov	r6, r1
 8004b56:	d9f4      	bls.n	8004b42 <_printf_i+0x11a>
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d10b      	bne.n	8004b74 <_printf_i+0x14c>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	07de      	lsls	r6, r3, #31
 8004b60:	d508      	bpl.n	8004b74 <_printf_i+0x14c>
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	6861      	ldr	r1, [r4, #4]
 8004b66:	4299      	cmp	r1, r3
 8004b68:	bfde      	ittt	le
 8004b6a:	2330      	movle	r3, #48	; 0x30
 8004b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b74:	1b52      	subs	r2, r2, r5
 8004b76:	6122      	str	r2, [r4, #16]
 8004b78:	f8cd a000 	str.w	sl, [sp]
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	aa03      	add	r2, sp, #12
 8004b80:	4621      	mov	r1, r4
 8004b82:	4640      	mov	r0, r8
 8004b84:	f7ff fee2 	bl	800494c <_printf_common>
 8004b88:	3001      	adds	r0, #1
 8004b8a:	d14c      	bne.n	8004c26 <_printf_i+0x1fe>
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	b004      	add	sp, #16
 8004b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b96:	4835      	ldr	r0, [pc, #212]	; (8004c6c <_printf_i+0x244>)
 8004b98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b9c:	6829      	ldr	r1, [r5, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ba4:	6029      	str	r1, [r5, #0]
 8004ba6:	061d      	lsls	r5, r3, #24
 8004ba8:	d514      	bpl.n	8004bd4 <_printf_i+0x1ac>
 8004baa:	07df      	lsls	r7, r3, #31
 8004bac:	bf44      	itt	mi
 8004bae:	f043 0320 	orrmi.w	r3, r3, #32
 8004bb2:	6023      	strmi	r3, [r4, #0]
 8004bb4:	b91e      	cbnz	r6, 8004bbe <_printf_i+0x196>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f023 0320 	bic.w	r3, r3, #32
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	2310      	movs	r3, #16
 8004bc0:	e7b0      	b.n	8004b24 <_printf_i+0xfc>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	f043 0320 	orr.w	r3, r3, #32
 8004bc8:	6023      	str	r3, [r4, #0]
 8004bca:	2378      	movs	r3, #120	; 0x78
 8004bcc:	4828      	ldr	r0, [pc, #160]	; (8004c70 <_printf_i+0x248>)
 8004bce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bd2:	e7e3      	b.n	8004b9c <_printf_i+0x174>
 8004bd4:	0659      	lsls	r1, r3, #25
 8004bd6:	bf48      	it	mi
 8004bd8:	b2b6      	uxthmi	r6, r6
 8004bda:	e7e6      	b.n	8004baa <_printf_i+0x182>
 8004bdc:	4615      	mov	r5, r2
 8004bde:	e7bb      	b.n	8004b58 <_printf_i+0x130>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	6826      	ldr	r6, [r4, #0]
 8004be4:	6961      	ldr	r1, [r4, #20]
 8004be6:	1d18      	adds	r0, r3, #4
 8004be8:	6028      	str	r0, [r5, #0]
 8004bea:	0635      	lsls	r5, r6, #24
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	d501      	bpl.n	8004bf4 <_printf_i+0x1cc>
 8004bf0:	6019      	str	r1, [r3, #0]
 8004bf2:	e002      	b.n	8004bfa <_printf_i+0x1d2>
 8004bf4:	0670      	lsls	r0, r6, #25
 8004bf6:	d5fb      	bpl.n	8004bf0 <_printf_i+0x1c8>
 8004bf8:	8019      	strh	r1, [r3, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	6123      	str	r3, [r4, #16]
 8004bfe:	4615      	mov	r5, r2
 8004c00:	e7ba      	b.n	8004b78 <_printf_i+0x150>
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	1d1a      	adds	r2, r3, #4
 8004c06:	602a      	str	r2, [r5, #0]
 8004c08:	681d      	ldr	r5, [r3, #0]
 8004c0a:	6862      	ldr	r2, [r4, #4]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	f7fb fade 	bl	80001d0 <memchr>
 8004c14:	b108      	cbz	r0, 8004c1a <_printf_i+0x1f2>
 8004c16:	1b40      	subs	r0, r0, r5
 8004c18:	6060      	str	r0, [r4, #4]
 8004c1a:	6863      	ldr	r3, [r4, #4]
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c24:	e7a8      	b.n	8004b78 <_printf_i+0x150>
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	462a      	mov	r2, r5
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	47d0      	blx	sl
 8004c30:	3001      	adds	r0, #1
 8004c32:	d0ab      	beq.n	8004b8c <_printf_i+0x164>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	079b      	lsls	r3, r3, #30
 8004c38:	d413      	bmi.n	8004c62 <_printf_i+0x23a>
 8004c3a:	68e0      	ldr	r0, [r4, #12]
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	4298      	cmp	r0, r3
 8004c40:	bfb8      	it	lt
 8004c42:	4618      	movlt	r0, r3
 8004c44:	e7a4      	b.n	8004b90 <_printf_i+0x168>
 8004c46:	2301      	movs	r3, #1
 8004c48:	4632      	mov	r2, r6
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d09b      	beq.n	8004b8c <_printf_i+0x164>
 8004c54:	3501      	adds	r5, #1
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	9903      	ldr	r1, [sp, #12]
 8004c5a:	1a5b      	subs	r3, r3, r1
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	dcf2      	bgt.n	8004c46 <_printf_i+0x21e>
 8004c60:	e7eb      	b.n	8004c3a <_printf_i+0x212>
 8004c62:	2500      	movs	r5, #0
 8004c64:	f104 0619 	add.w	r6, r4, #25
 8004c68:	e7f5      	b.n	8004c56 <_printf_i+0x22e>
 8004c6a:	bf00      	nop
 8004c6c:	08005005 	.word	0x08005005
 8004c70:	08005016 	.word	0x08005016

08004c74 <memmove>:
 8004c74:	4288      	cmp	r0, r1
 8004c76:	b510      	push	{r4, lr}
 8004c78:	eb01 0402 	add.w	r4, r1, r2
 8004c7c:	d902      	bls.n	8004c84 <memmove+0x10>
 8004c7e:	4284      	cmp	r4, r0
 8004c80:	4623      	mov	r3, r4
 8004c82:	d807      	bhi.n	8004c94 <memmove+0x20>
 8004c84:	1e43      	subs	r3, r0, #1
 8004c86:	42a1      	cmp	r1, r4
 8004c88:	d008      	beq.n	8004c9c <memmove+0x28>
 8004c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c92:	e7f8      	b.n	8004c86 <memmove+0x12>
 8004c94:	4402      	add	r2, r0
 8004c96:	4601      	mov	r1, r0
 8004c98:	428a      	cmp	r2, r1
 8004c9a:	d100      	bne.n	8004c9e <memmove+0x2a>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ca6:	e7f7      	b.n	8004c98 <memmove+0x24>

08004ca8 <_free_r>:
 8004ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004caa:	2900      	cmp	r1, #0
 8004cac:	d044      	beq.n	8004d38 <_free_r+0x90>
 8004cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb2:	9001      	str	r0, [sp, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f1a1 0404 	sub.w	r4, r1, #4
 8004cba:	bfb8      	it	lt
 8004cbc:	18e4      	addlt	r4, r4, r3
 8004cbe:	f000 f913 	bl	8004ee8 <__malloc_lock>
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <_free_r+0x94>)
 8004cc4:	9801      	ldr	r0, [sp, #4]
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	b933      	cbnz	r3, 8004cd8 <_free_r+0x30>
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	6014      	str	r4, [r2, #0]
 8004cce:	b003      	add	sp, #12
 8004cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cd4:	f000 b90e 	b.w	8004ef4 <__malloc_unlock>
 8004cd8:	42a3      	cmp	r3, r4
 8004cda:	d908      	bls.n	8004cee <_free_r+0x46>
 8004cdc:	6825      	ldr	r5, [r4, #0]
 8004cde:	1961      	adds	r1, r4, r5
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	bf01      	itttt	eq
 8004ce4:	6819      	ldreq	r1, [r3, #0]
 8004ce6:	685b      	ldreq	r3, [r3, #4]
 8004ce8:	1949      	addeq	r1, r1, r5
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	e7ed      	b.n	8004cca <_free_r+0x22>
 8004cee:	461a      	mov	r2, r3
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b10b      	cbz	r3, 8004cf8 <_free_r+0x50>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d9fa      	bls.n	8004cee <_free_r+0x46>
 8004cf8:	6811      	ldr	r1, [r2, #0]
 8004cfa:	1855      	adds	r5, r2, r1
 8004cfc:	42a5      	cmp	r5, r4
 8004cfe:	d10b      	bne.n	8004d18 <_free_r+0x70>
 8004d00:	6824      	ldr	r4, [r4, #0]
 8004d02:	4421      	add	r1, r4
 8004d04:	1854      	adds	r4, r2, r1
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	6011      	str	r1, [r2, #0]
 8004d0a:	d1e0      	bne.n	8004cce <_free_r+0x26>
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	4421      	add	r1, r4
 8004d14:	6011      	str	r1, [r2, #0]
 8004d16:	e7da      	b.n	8004cce <_free_r+0x26>
 8004d18:	d902      	bls.n	8004d20 <_free_r+0x78>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	6003      	str	r3, [r0, #0]
 8004d1e:	e7d6      	b.n	8004cce <_free_r+0x26>
 8004d20:	6825      	ldr	r5, [r4, #0]
 8004d22:	1961      	adds	r1, r4, r5
 8004d24:	428b      	cmp	r3, r1
 8004d26:	bf04      	itt	eq
 8004d28:	6819      	ldreq	r1, [r3, #0]
 8004d2a:	685b      	ldreq	r3, [r3, #4]
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	bf04      	itt	eq
 8004d30:	1949      	addeq	r1, r1, r5
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	6054      	str	r4, [r2, #4]
 8004d36:	e7ca      	b.n	8004cce <_free_r+0x26>
 8004d38:	b003      	add	sp, #12
 8004d3a:	bd30      	pop	{r4, r5, pc}
 8004d3c:	2000a13c 	.word	0x2000a13c

08004d40 <sbrk_aligned>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	4e0e      	ldr	r6, [pc, #56]	; (8004d7c <sbrk_aligned+0x3c>)
 8004d44:	460c      	mov	r4, r1
 8004d46:	6831      	ldr	r1, [r6, #0]
 8004d48:	4605      	mov	r5, r0
 8004d4a:	b911      	cbnz	r1, 8004d52 <sbrk_aligned+0x12>
 8004d4c:	f000 f8bc 	bl	8004ec8 <_sbrk_r>
 8004d50:	6030      	str	r0, [r6, #0]
 8004d52:	4621      	mov	r1, r4
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 f8b7 	bl	8004ec8 <_sbrk_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	d00a      	beq.n	8004d74 <sbrk_aligned+0x34>
 8004d5e:	1cc4      	adds	r4, r0, #3
 8004d60:	f024 0403 	bic.w	r4, r4, #3
 8004d64:	42a0      	cmp	r0, r4
 8004d66:	d007      	beq.n	8004d78 <sbrk_aligned+0x38>
 8004d68:	1a21      	subs	r1, r4, r0
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f8ac 	bl	8004ec8 <_sbrk_r>
 8004d70:	3001      	adds	r0, #1
 8004d72:	d101      	bne.n	8004d78 <sbrk_aligned+0x38>
 8004d74:	f04f 34ff 	mov.w	r4, #4294967295
 8004d78:	4620      	mov	r0, r4
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	2000a140 	.word	0x2000a140

08004d80 <_malloc_r>:
 8004d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d84:	1ccd      	adds	r5, r1, #3
 8004d86:	f025 0503 	bic.w	r5, r5, #3
 8004d8a:	3508      	adds	r5, #8
 8004d8c:	2d0c      	cmp	r5, #12
 8004d8e:	bf38      	it	cc
 8004d90:	250c      	movcc	r5, #12
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	4607      	mov	r7, r0
 8004d96:	db01      	blt.n	8004d9c <_malloc_r+0x1c>
 8004d98:	42a9      	cmp	r1, r5
 8004d9a:	d905      	bls.n	8004da8 <_malloc_r+0x28>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	2600      	movs	r6, #0
 8004da2:	4630      	mov	r0, r6
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da8:	4e2e      	ldr	r6, [pc, #184]	; (8004e64 <_malloc_r+0xe4>)
 8004daa:	f000 f89d 	bl	8004ee8 <__malloc_lock>
 8004dae:	6833      	ldr	r3, [r6, #0]
 8004db0:	461c      	mov	r4, r3
 8004db2:	bb34      	cbnz	r4, 8004e02 <_malloc_r+0x82>
 8004db4:	4629      	mov	r1, r5
 8004db6:	4638      	mov	r0, r7
 8004db8:	f7ff ffc2 	bl	8004d40 <sbrk_aligned>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	d14d      	bne.n	8004e5e <_malloc_r+0xde>
 8004dc2:	6834      	ldr	r4, [r6, #0]
 8004dc4:	4626      	mov	r6, r4
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d140      	bne.n	8004e4c <_malloc_r+0xcc>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	4631      	mov	r1, r6
 8004dce:	4638      	mov	r0, r7
 8004dd0:	eb04 0803 	add.w	r8, r4, r3
 8004dd4:	f000 f878 	bl	8004ec8 <_sbrk_r>
 8004dd8:	4580      	cmp	r8, r0
 8004dda:	d13a      	bne.n	8004e52 <_malloc_r+0xd2>
 8004ddc:	6821      	ldr	r1, [r4, #0]
 8004dde:	3503      	adds	r5, #3
 8004de0:	1a6d      	subs	r5, r5, r1
 8004de2:	f025 0503 	bic.w	r5, r5, #3
 8004de6:	3508      	adds	r5, #8
 8004de8:	2d0c      	cmp	r5, #12
 8004dea:	bf38      	it	cc
 8004dec:	250c      	movcc	r5, #12
 8004dee:	4629      	mov	r1, r5
 8004df0:	4638      	mov	r0, r7
 8004df2:	f7ff ffa5 	bl	8004d40 <sbrk_aligned>
 8004df6:	3001      	adds	r0, #1
 8004df8:	d02b      	beq.n	8004e52 <_malloc_r+0xd2>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	442b      	add	r3, r5
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	e00e      	b.n	8004e20 <_malloc_r+0xa0>
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	1b52      	subs	r2, r2, r5
 8004e06:	d41e      	bmi.n	8004e46 <_malloc_r+0xc6>
 8004e08:	2a0b      	cmp	r2, #11
 8004e0a:	d916      	bls.n	8004e3a <_malloc_r+0xba>
 8004e0c:	1961      	adds	r1, r4, r5
 8004e0e:	42a3      	cmp	r3, r4
 8004e10:	6025      	str	r5, [r4, #0]
 8004e12:	bf18      	it	ne
 8004e14:	6059      	strne	r1, [r3, #4]
 8004e16:	6863      	ldr	r3, [r4, #4]
 8004e18:	bf08      	it	eq
 8004e1a:	6031      	streq	r1, [r6, #0]
 8004e1c:	5162      	str	r2, [r4, r5]
 8004e1e:	604b      	str	r3, [r1, #4]
 8004e20:	4638      	mov	r0, r7
 8004e22:	f104 060b 	add.w	r6, r4, #11
 8004e26:	f000 f865 	bl	8004ef4 <__malloc_unlock>
 8004e2a:	f026 0607 	bic.w	r6, r6, #7
 8004e2e:	1d23      	adds	r3, r4, #4
 8004e30:	1af2      	subs	r2, r6, r3
 8004e32:	d0b6      	beq.n	8004da2 <_malloc_r+0x22>
 8004e34:	1b9b      	subs	r3, r3, r6
 8004e36:	50a3      	str	r3, [r4, r2]
 8004e38:	e7b3      	b.n	8004da2 <_malloc_r+0x22>
 8004e3a:	6862      	ldr	r2, [r4, #4]
 8004e3c:	42a3      	cmp	r3, r4
 8004e3e:	bf0c      	ite	eq
 8004e40:	6032      	streq	r2, [r6, #0]
 8004e42:	605a      	strne	r2, [r3, #4]
 8004e44:	e7ec      	b.n	8004e20 <_malloc_r+0xa0>
 8004e46:	4623      	mov	r3, r4
 8004e48:	6864      	ldr	r4, [r4, #4]
 8004e4a:	e7b2      	b.n	8004db2 <_malloc_r+0x32>
 8004e4c:	4634      	mov	r4, r6
 8004e4e:	6876      	ldr	r6, [r6, #4]
 8004e50:	e7b9      	b.n	8004dc6 <_malloc_r+0x46>
 8004e52:	230c      	movs	r3, #12
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4638      	mov	r0, r7
 8004e58:	f000 f84c 	bl	8004ef4 <__malloc_unlock>
 8004e5c:	e7a1      	b.n	8004da2 <_malloc_r+0x22>
 8004e5e:	6025      	str	r5, [r4, #0]
 8004e60:	e7de      	b.n	8004e20 <_malloc_r+0xa0>
 8004e62:	bf00      	nop
 8004e64:	2000a13c 	.word	0x2000a13c

08004e68 <_realloc_r>:
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	4614      	mov	r4, r2
 8004e70:	460e      	mov	r6, r1
 8004e72:	b921      	cbnz	r1, 8004e7e <_realloc_r+0x16>
 8004e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	4611      	mov	r1, r2
 8004e7a:	f7ff bf81 	b.w	8004d80 <_malloc_r>
 8004e7e:	b92a      	cbnz	r2, 8004e8c <_realloc_r+0x24>
 8004e80:	f7ff ff12 	bl	8004ca8 <_free_r>
 8004e84:	4625      	mov	r5, r4
 8004e86:	4628      	mov	r0, r5
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e8c:	f000 f838 	bl	8004f00 <_malloc_usable_size_r>
 8004e90:	4284      	cmp	r4, r0
 8004e92:	4607      	mov	r7, r0
 8004e94:	d802      	bhi.n	8004e9c <_realloc_r+0x34>
 8004e96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e9a:	d812      	bhi.n	8004ec2 <_realloc_r+0x5a>
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f7ff ff6e 	bl	8004d80 <_malloc_r>
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d0ed      	beq.n	8004e86 <_realloc_r+0x1e>
 8004eaa:	42bc      	cmp	r4, r7
 8004eac:	4622      	mov	r2, r4
 8004eae:	4631      	mov	r1, r6
 8004eb0:	bf28      	it	cs
 8004eb2:	463a      	movcs	r2, r7
 8004eb4:	f7ff fbb8 	bl	8004628 <memcpy>
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fef4 	bl	8004ca8 <_free_r>
 8004ec0:	e7e1      	b.n	8004e86 <_realloc_r+0x1e>
 8004ec2:	4635      	mov	r5, r6
 8004ec4:	e7df      	b.n	8004e86 <_realloc_r+0x1e>
	...

08004ec8 <_sbrk_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4d06      	ldr	r5, [pc, #24]	; (8004ee4 <_sbrk_r+0x1c>)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4604      	mov	r4, r0
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	602b      	str	r3, [r5, #0]
 8004ed4:	f7fb ffa6 	bl	8000e24 <_sbrk>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d102      	bne.n	8004ee2 <_sbrk_r+0x1a>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	b103      	cbz	r3, 8004ee2 <_sbrk_r+0x1a>
 8004ee0:	6023      	str	r3, [r4, #0]
 8004ee2:	bd38      	pop	{r3, r4, r5, pc}
 8004ee4:	2000a144 	.word	0x2000a144

08004ee8 <__malloc_lock>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__malloc_lock+0x8>)
 8004eea:	f000 b811 	b.w	8004f10 <__retarget_lock_acquire_recursive>
 8004eee:	bf00      	nop
 8004ef0:	2000a148 	.word	0x2000a148

08004ef4 <__malloc_unlock>:
 8004ef4:	4801      	ldr	r0, [pc, #4]	; (8004efc <__malloc_unlock+0x8>)
 8004ef6:	f000 b80c 	b.w	8004f12 <__retarget_lock_release_recursive>
 8004efa:	bf00      	nop
 8004efc:	2000a148 	.word	0x2000a148

08004f00 <_malloc_usable_size_r>:
 8004f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f04:	1f18      	subs	r0, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfbc      	itt	lt
 8004f0a:	580b      	ldrlt	r3, [r1, r0]
 8004f0c:	18c0      	addlt	r0, r0, r3
 8004f0e:	4770      	bx	lr

08004f10 <__retarget_lock_acquire_recursive>:
 8004f10:	4770      	bx	lr

08004f12 <__retarget_lock_release_recursive>:
 8004f12:	4770      	bx	lr

08004f14 <_init>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr

08004f20 <_fini>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr
